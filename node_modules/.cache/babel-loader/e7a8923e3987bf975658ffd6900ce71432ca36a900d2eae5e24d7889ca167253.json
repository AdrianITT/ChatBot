{"ast":null,"code":"var _jsxFileName = \"/Users/appletech/Desktop/chatbottest/chatbottest/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Widget, addResponseMessage } from 'react-chat-widget-react-18';\nimport 'react-chat-widget-react-18/lib/styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [step, setStep] = React.useState(0);\n  const [formData, setFormData] = useState({\n    nombre: '',\n    apellido: '',\n    correo: '',\n    telefono: '',\n    empresa: '',\n    fechaSolicitud: '',\n    fechaCaducidad: '',\n    servicios: []\n  });\n  const [servicioActual, setServicioActual] = useState({});\n  const hasGreeted = React.useRef(false);\n  React.useEffect(() => {\n    if (!hasGreeted.current) {\n      addResponseMessage('¡Hola! Soy un chatbot. ¿Quieres crear una cotización?');\n      addResponseMessage('Para crear una cotización necesito algunos datos.');\n      addResponseMessage(\"¿Cuál es tu nombre?\");\n      hasGreeted.current = true;\n    }\n  }, []);\n  const validacionNombre = nombre => {\n    const regex = /^[A-Z][a-zA-Z]{0,12}$/;\n    return regex.test(nombre);\n  };\n  const validacionApellido = apellido => {\n    const regex = /^[A-Z][a-zA-Z]{0,13}$/;\n    return regex.test(apellido);\n  };\n  const handleNewUserMessage = msg => {\n    switch (step) {\n      case 0:\n        if (!validacionNombre(msg)) {\n          addResponseMessage('Por favor, ingresa un nombre válido (inicia con mayúscula y máximo 12 letras).');\n          addResponseMessage('¿Cuál es tu apellido paterno?');\n          return;\n        }\n        setFormData({\n          ...formData,\n          nombre: msg\n        });\n        addResponseMessage('¿Cuál es tu apellido paterno?');\n        setStep(1);\n        break;\n      case 1:\n        if (!validacionApellido(msg)) {\n          addResponseMessage('Por favor, ingresa un apellido válido (inicia con mayúscula y máximo 13 letras).');\n          addResponseMessage('¿Cuál es tu apellido materno?');\n          return;\n        }\n        setFormData({\n          ...formData,\n          apellido: msg\n        });\n        addResponseMessage('¿Cuál es tu correo electrónico?');\n        setStep(2);\n        break;\n      case 2:\n        setFormData({\n          ...formData,\n          correo: msg\n        });\n        addResponseMessage('¿Cuál es tu número telefónico?');\n        setStep(3);\n        break;\n      case 3:\n        setFormData({\n          ...formData,\n          telefono: msg\n        });\n        addResponseMessage('¿Cuál es el nombre de la empresa?');\n        setStep(4);\n        break;\n      case 4:\n        setFormData({\n          ...formData,\n          empresa: msg\n        });\n        addResponseMessage('¿Cuál es la fecha que solicitas? (YYYY-MM-DD)');\n        setStep(5);\n        break;\n      case 5:\n        const fechaSolicitud = msg;\n        const fechaCaducidad = new Date(new Date(fechaSolicitud).getTime() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0];\n        setFormData({\n          ...formData,\n          fechaSolicitud,\n          fechaCaducidad\n        });\n        addResponseMessage(`La fecha de caducidad será: ${fechaCaducidad}`);\n        addResponseMessage('Ahora comenzaras a agregar los servicios');\n        addResponseMessage('Escribe el número de servicio:');\n        setStep(6);\n        break;\n      case 6:\n        setServicioActual({\n          numero: msg\n        });\n        addResponseMessage('¿Cuál es la cantidad del servicio?');\n        setStep(7);\n        break;\n      case 7:\n        const servicio = {\n          ...servicioActual,\n          cantidad: msg\n        };\n        const nuevosServicios = [...formData.servicios, servicio];\n        setFormData({\n          ...formData,\n          servicios: nuevosServicios\n        });\n        setServicioActual({});\n        addResponseMessage('¿Deseas agregar otro servicio? (sí/no)');\n        setStep(8);\n        break;\n      case 8:\n        if (msg.toLowerCase() === 'sí' || msg.toLowerCase() === 'si') {\n          addResponseMessage('Escribe el número de servicio:');\n          setStep(6);\n        } else {\n          addResponseMessage('¡Gracias por completar el formulario!');\n          console.log('Datos finales del formulario:', formData);\n          setStep(9);\n        }\n        break;\n      default:\n        addResponseMessage('Ya hemos terminado. ¡Gracias!');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Mi App con Chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Widget, {\n      handleNewUserMessage: handleNewUserMessage,\n      title: \"Chat De Cotizacion\",\n      subtitle: \"Estamos para ayudarte\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"9Tk+J1Q+cUfe5GAjXX07v8NkNfA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","Widget","addResponseMessage","jsxDEV","_jsxDEV","App","_s","step","setStep","formData","setFormData","nombre","apellido","correo","telefono","empresa","fechaSolicitud","fechaCaducidad","servicios","servicioActual","setServicioActual","hasGreeted","useRef","current","validacionNombre","regex","test","validacionApellido","handleNewUserMessage","msg","Date","getTime","toISOString","split","numero","servicio","cantidad","nuevosServicios","toLowerCase","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","title","subtitle","_c","$RefreshReg$"],"sources":["/Users/appletech/Desktop/chatbottest/chatbottest/src/App.js"],"sourcesContent":["import React,{useEffect, useState} from 'react';\nimport { Widget, addResponseMessage } from 'react-chat-widget-react-18';\nimport 'react-chat-widget-react-18/lib/styles.css';\n\nfunction App() {\n  const [step, setStep] = React.useState(0);\n  const [formData, setFormData] = useState({\n    nombre: '',\n    apellido: '',\n    correo: '',\n    telefono: '',\n    empresa: '',\n    fechaSolicitud: '',\n    fechaCaducidad: '',\n    servicios: [],\n  });\n  const [servicioActual, setServicioActual] = useState({});\n  const hasGreeted = React.useRef(false);\n\n  React.useEffect(() => {\n    if (!hasGreeted.current) {\n      addResponseMessage('¡Hola! Soy un chatbot. ¿Quieres crear una cotización?');\n      addResponseMessage('Para crear una cotización necesito algunos datos.');\n      addResponseMessage(\"¿Cuál es tu nombre?\");\n      hasGreeted.current = true;\n    }\n  }, []);\n  const validacionNombre = (nombre) => {\n    const regex = /^[A-Z][a-zA-Z]{0,12}$/;\n    return regex.test(nombre);\n  }\n  const validacionApellido = (apellido) => {\n    const regex = /^[A-Z][a-zA-Z]{0,13}$/;\n    return regex.test(apellido);\n  }\n\n  const handleNewUserMessage = (msg) => {\n    switch (step) {\n      case 0:\n        if (!validacionNombre(msg)) {\n          addResponseMessage('Por favor, ingresa un nombre válido (inicia con mayúscula y máximo 12 letras).');\n          addResponseMessage('¿Cuál es tu apellido paterno?');\n          return;\n        }\n        setFormData({ ...formData, nombre: msg });\n        addResponseMessage('¿Cuál es tu apellido paterno?');\n        setStep(1);\n        break;\n      case 1:\n        if(!validacionApellido(msg)) {\n          addResponseMessage('Por favor, ingresa un apellido válido (inicia con mayúscula y máximo 13 letras).');\n          addResponseMessage('¿Cuál es tu apellido materno?');\n          return;\n        }\n        setFormData({ ...formData, apellido: msg });\n        addResponseMessage('¿Cuál es tu correo electrónico?');\n        setStep(2);\n        break;\n      case 2:\n        setFormData({ ...formData, correo: msg });\n        addResponseMessage('¿Cuál es tu número telefónico?');\n        setStep(3);\n        break;\n      case 3:\n        setFormData({ ...formData, telefono: msg });\n        addResponseMessage('¿Cuál es el nombre de la empresa?');\n        setStep(4);\n        break;\n      case 4:\n        setFormData({ ...formData, empresa: msg });\n        addResponseMessage('¿Cuál es la fecha que solicitas? (YYYY-MM-DD)');\n        setStep(5);\n        break;\n      case 5:\n        const fechaSolicitud = msg;\n        const fechaCaducidad = new Date(new Date(fechaSolicitud).getTime() + 30 * 24 * 60 * 60 * 1000)\n          .toISOString()\n          .split('T')[0];\n        setFormData({ ...formData, fechaSolicitud, fechaCaducidad });\n        addResponseMessage(`La fecha de caducidad será: ${fechaCaducidad}`);\n        addResponseMessage('Ahora comenzaras a agregar los servicios');\n        addResponseMessage('Escribe el número de servicio:');\n        setStep(6);\n        break;\n      case 6:\n        setServicioActual({ numero: msg });\n        addResponseMessage('¿Cuál es la cantidad del servicio?');\n        setStep(7);\n        break;\n      case 7:\n        const servicio = { ...servicioActual, cantidad: msg };\n        const nuevosServicios = [...formData.servicios, servicio];\n        setFormData({ ...formData, servicios: nuevosServicios });\n        setServicioActual({});\n        addResponseMessage('¿Deseas agregar otro servicio? (sí/no)');\n        setStep(8);\n        break;\n      case 8:\n        if (msg.toLowerCase() === 'sí' || msg.toLowerCase() === 'si') {\n          addResponseMessage('Escribe el número de servicio:');\n          setStep(6);\n        } else {\n          addResponseMessage('¡Gracias por completar el formulario!');\n          console.log('Datos finales del formulario:', formData);\n          setStep(9);\n        }\n        break;\n      default:\n        addResponseMessage('Ya hemos terminado. ¡Gracias!');\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Mi App con Chat</h1>\n      <Widget\n        handleNewUserMessage={handleNewUserMessage}\n        title=\"Chat De Cotizacion\"\n        subtitle=\"Estamos para ayudarte\"\n      />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAEC,SAAS,EAAEC,QAAQ,QAAO,OAAO;AAC/C,SAASC,MAAM,EAAEC,kBAAkB,QAAQ,4BAA4B;AACvE,OAAO,2CAA2C;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,KAAK,CAACE,QAAQ,CAAC,CAAC,CAAC;EACzC,MAAM,CAACS,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC;IACvCW,MAAM,EAAE,EAAE;IACVC,QAAQ,EAAE,EAAE;IACZC,MAAM,EAAE,EAAE;IACVC,QAAQ,EAAE,EAAE;IACZC,OAAO,EAAE,EAAE;IACXC,cAAc,EAAE,EAAE;IAClBC,cAAc,EAAE,EAAE;IAClBC,SAAS,EAAE;EACb,CAAC,CAAC;EACF,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGpB,QAAQ,CAAC,CAAC,CAAC,CAAC;EACxD,MAAMqB,UAAU,GAAGvB,KAAK,CAACwB,MAAM,CAAC,KAAK,CAAC;EAEtCxB,KAAK,CAACC,SAAS,CAAC,MAAM;IACpB,IAAI,CAACsB,UAAU,CAACE,OAAO,EAAE;MACvBrB,kBAAkB,CAAC,uDAAuD,CAAC;MAC3EA,kBAAkB,CAAC,mDAAmD,CAAC;MACvEA,kBAAkB,CAAC,qBAAqB,CAAC;MACzCmB,UAAU,CAACE,OAAO,GAAG,IAAI;IAC3B;EACF,CAAC,EAAE,EAAE,CAAC;EACN,MAAMC,gBAAgB,GAAIb,MAAM,IAAK;IACnC,MAAMc,KAAK,GAAG,uBAAuB;IACrC,OAAOA,KAAK,CAACC,IAAI,CAACf,MAAM,CAAC;EAC3B,CAAC;EACD,MAAMgB,kBAAkB,GAAIf,QAAQ,IAAK;IACvC,MAAMa,KAAK,GAAG,uBAAuB;IACrC,OAAOA,KAAK,CAACC,IAAI,CAACd,QAAQ,CAAC;EAC7B,CAAC;EAED,MAAMgB,oBAAoB,GAAIC,GAAG,IAAK;IACpC,QAAQtB,IAAI;MACV,KAAK,CAAC;QACJ,IAAI,CAACiB,gBAAgB,CAACK,GAAG,CAAC,EAAE;UAC1B3B,kBAAkB,CAAC,gFAAgF,CAAC;UACpGA,kBAAkB,CAAC,+BAA+B,CAAC;UACnD;QACF;QACAQ,WAAW,CAAC;UAAE,GAAGD,QAAQ;UAAEE,MAAM,EAAEkB;QAAI,CAAC,CAAC;QACzC3B,kBAAkB,CAAC,+BAA+B,CAAC;QACnDM,OAAO,CAAC,CAAC,CAAC;QACV;MACF,KAAK,CAAC;QACJ,IAAG,CAACmB,kBAAkB,CAACE,GAAG,CAAC,EAAE;UAC3B3B,kBAAkB,CAAC,kFAAkF,CAAC;UACtGA,kBAAkB,CAAC,+BAA+B,CAAC;UACnD;QACF;QACAQ,WAAW,CAAC;UAAE,GAAGD,QAAQ;UAAEG,QAAQ,EAAEiB;QAAI,CAAC,CAAC;QAC3C3B,kBAAkB,CAAC,iCAAiC,CAAC;QACrDM,OAAO,CAAC,CAAC,CAAC;QACV;MACF,KAAK,CAAC;QACJE,WAAW,CAAC;UAAE,GAAGD,QAAQ;UAAEI,MAAM,EAAEgB;QAAI,CAAC,CAAC;QACzC3B,kBAAkB,CAAC,gCAAgC,CAAC;QACpDM,OAAO,CAAC,CAAC,CAAC;QACV;MACF,KAAK,CAAC;QACJE,WAAW,CAAC;UAAE,GAAGD,QAAQ;UAAEK,QAAQ,EAAEe;QAAI,CAAC,CAAC;QAC3C3B,kBAAkB,CAAC,mCAAmC,CAAC;QACvDM,OAAO,CAAC,CAAC,CAAC;QACV;MACF,KAAK,CAAC;QACJE,WAAW,CAAC;UAAE,GAAGD,QAAQ;UAAEM,OAAO,EAAEc;QAAI,CAAC,CAAC;QAC1C3B,kBAAkB,CAAC,+CAA+C,CAAC;QACnEM,OAAO,CAAC,CAAC,CAAC;QACV;MACF,KAAK,CAAC;QACJ,MAAMQ,cAAc,GAAGa,GAAG;QAC1B,MAAMZ,cAAc,GAAG,IAAIa,IAAI,CAAC,IAAIA,IAAI,CAACd,cAAc,CAAC,CAACe,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAC3FC,WAAW,CAAC,CAAC,CACbC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAChBvB,WAAW,CAAC;UAAE,GAAGD,QAAQ;UAAEO,cAAc;UAAEC;QAAe,CAAC,CAAC;QAC5Df,kBAAkB,CAAC,+BAA+Be,cAAc,EAAE,CAAC;QACnEf,kBAAkB,CAAC,0CAA0C,CAAC;QAC9DA,kBAAkB,CAAC,gCAAgC,CAAC;QACpDM,OAAO,CAAC,CAAC,CAAC;QACV;MACF,KAAK,CAAC;QACJY,iBAAiB,CAAC;UAAEc,MAAM,EAAEL;QAAI,CAAC,CAAC;QAClC3B,kBAAkB,CAAC,oCAAoC,CAAC;QACxDM,OAAO,CAAC,CAAC,CAAC;QACV;MACF,KAAK,CAAC;QACJ,MAAM2B,QAAQ,GAAG;UAAE,GAAGhB,cAAc;UAAEiB,QAAQ,EAAEP;QAAI,CAAC;QACrD,MAAMQ,eAAe,GAAG,CAAC,GAAG5B,QAAQ,CAACS,SAAS,EAAEiB,QAAQ,CAAC;QACzDzB,WAAW,CAAC;UAAE,GAAGD,QAAQ;UAAES,SAAS,EAAEmB;QAAgB,CAAC,CAAC;QACxDjB,iBAAiB,CAAC,CAAC,CAAC,CAAC;QACrBlB,kBAAkB,CAAC,wCAAwC,CAAC;QAC5DM,OAAO,CAAC,CAAC,CAAC;QACV;MACF,KAAK,CAAC;QACJ,IAAIqB,GAAG,CAACS,WAAW,CAAC,CAAC,KAAK,IAAI,IAAIT,GAAG,CAACS,WAAW,CAAC,CAAC,KAAK,IAAI,EAAE;UAC5DpC,kBAAkB,CAAC,gCAAgC,CAAC;UACpDM,OAAO,CAAC,CAAC,CAAC;QACZ,CAAC,MAAM;UACLN,kBAAkB,CAAC,uCAAuC,CAAC;UAC3DqC,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAE/B,QAAQ,CAAC;UACtDD,OAAO,CAAC,CAAC,CAAC;QACZ;QACA;MACF;QACEN,kBAAkB,CAAC,+BAA+B,CAAC;IACvD;EACF,CAAC;EAED,oBACEE,OAAA;IAAKqC,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBtC,OAAA;MAAAsC,QAAA,EAAI;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACxB1C,OAAA,CAACH,MAAM;MACL2B,oBAAoB,EAAEA,oBAAqB;MAC3CmB,KAAK,EAAC,oBAAoB;MAC1BC,QAAQ,EAAC;IAAuB;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAACxC,EAAA,CAtHQD,GAAG;AAAA4C,EAAA,GAAH5C,GAAG;AAwHZ,eAAeA,GAAG;AAAC,IAAA4C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}