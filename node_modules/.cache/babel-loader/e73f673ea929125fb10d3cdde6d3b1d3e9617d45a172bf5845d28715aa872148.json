{"ast":null,"code":"var _jsxFileName = \"/Users/appletech/Desktop/chatbottest/chatbottest/src/Components/ChatBotWidget.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport ChatBotify, { ChatBotProvider, useMessages } from \"react-chatbotify\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChatLogic() {\n  _s();\n  const {\n    pushMessage,\n    pushOptions\n  } = useMessages();\n  const [step, setStep] = useState(\"start\");\n  useEffect(() => {\n    setFlow({\n      start: async () => {\n        pushMessage(\"¡Hola! ¿Eres cliente nuestro?\");\n        pushOptions([{\n          label: \"Sí\",\n          value: \"yes\",\n          trigger: \"askName\"\n        }, {\n          label: \"No\",\n          value: \"no\",\n          trigger: \"endConversation\"\n        }]);\n      },\n      askName: async () => {\n        pushMessage(\"¿Cuál es tu nombre?\");\n      },\n      askSurname: async () => {\n        pushMessage(\"¿Cuál es tu apellido?\");\n      },\n      askEmail: async () => {\n        pushMessage(\"¿Cuál es tu correo electrónico?\");\n      },\n      askPhone: async () => {\n        pushMessage(\"¿Cuál es tu número de teléfono?\");\n      },\n      askCompany: async () => {\n        pushMessage(\"¿Cuál es el nombre de tu empresa?\");\n      },\n      selectService: async () => {\n        pushMessage(\"Selecciona un servicio:\");\n        pushOptions([{\n          label: \"Servicio A\",\n          value: \"A\",\n          trigger: \"askQuantity\"\n        }, {\n          label: \"Servicio B\",\n          value: \"B\",\n          trigger: \"askQuantity\"\n        }, {\n          label: \"Servicio C\",\n          value: \"C\",\n          trigger: \"askQuantity\"\n        }]);\n      },\n      askQuantity: async () => {\n        pushMessage(\"¿Qué cantidad deseas?\");\n      },\n      addAnother: async () => {\n        pushMessage(\"¿Quieres agregar otro servicio?\");\n        pushOptions([{\n          label: \"Sí\",\n          value: \"yes\",\n          trigger: \"selectService\"\n        }, {\n          label: \"No\",\n          value: \"no\",\n          trigger: \"endSummary\"\n        }]);\n      },\n      endSummary: async () => {\n        pushMessage(\"Gracias por tu información. ¡Te contactaremos pronto!\");\n      },\n      endConversation: async () => {\n        pushMessage(\"Gracias por tu interés. ¡Que tengas buen día!\");\n      }\n    });\n    // Iniciar flujo\n    setTimeout(() => {\n      setFlow(\"start\");\n    }, 500);\n  }, [setFlow, pushMessage, pushOptions]);\n  return null;\n}\n_s(ChatLogic, \"8uXTWesp1r/G2cuA9eGtxoPul8I=\", false, function () {\n  return [useMessages];\n});\n_c = ChatLogic;\nfunction ChatBotWidget() {\n  return /*#__PURE__*/_jsxDEV(ChatBotProvider, {\n    children: /*#__PURE__*/_jsxDEV(ChatLogic, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 6\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 6\n  }, this);\n}\n_c2 = ChatBotWidget;\nexport default ChatBotWidget;\nvar _c, _c2;\n$RefreshReg$(_c, \"ChatLogic\");\n$RefreshReg$(_c2, \"ChatBotWidget\");","map":{"version":3,"names":["React","useEffect","useState","ChatBotify","ChatBotProvider","useMessages","jsxDEV","_jsxDEV","ChatLogic","_s","pushMessage","pushOptions","step","setStep","setFlow","start","label","value","trigger","askName","askSurname","askEmail","askPhone","askCompany","selectService","askQuantity","addAnother","endSummary","endConversation","setTimeout","_c","ChatBotWidget","children","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["/Users/appletech/Desktop/chatbottest/chatbottest/src/Components/ChatBotWidget.jsx"],"sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport ChatBotify,{ChatBotProvider,\n     useMessages,\n} from \"react-chatbotify\";\n\n     function ChatLogic() {\n          const { pushMessage, pushOptions } = useMessages();\n          const [step, setStep] = useState(\"start\");\n        \n          useEffect(() => {\n            setFlow({\n              start: async () => {\n                pushMessage(\"¡Hola! ¿Eres cliente nuestro?\");\n                pushOptions([\n                  {\n                    label: \"Sí\",\n                    value: \"yes\",\n                    trigger: \"askName\",\n                  },\n                  {\n                    label: \"No\",\n                    value: \"no\",\n                    trigger: \"endConversation\",\n                  },\n                ]);\n              },\n              askName: async () => {\n                pushMessage(\"¿Cuál es tu nombre?\");\n              },\n              askSurname: async () => {\n                pushMessage(\"¿Cuál es tu apellido?\");\n              },\n              askEmail: async () => {\n                pushMessage(\"¿Cuál es tu correo electrónico?\");\n              },\n              askPhone: async () => {\n                pushMessage(\"¿Cuál es tu número de teléfono?\");\n              },\n              askCompany: async () => {\n                pushMessage(\"¿Cuál es el nombre de tu empresa?\");\n              },\n              selectService: async () => {\n                pushMessage(\"Selecciona un servicio:\");\n                pushOptions([\n                  { label: \"Servicio A\", value: \"A\", trigger: \"askQuantity\" },\n                  { label: \"Servicio B\", value: \"B\", trigger: \"askQuantity\" },\n                  { label: \"Servicio C\", value: \"C\", trigger: \"askQuantity\" },\n                ]);\n              },\n              askQuantity: async () => {\n                pushMessage(\"¿Qué cantidad deseas?\");\n              },\n              addAnother: async () => {\n                pushMessage(\"¿Quieres agregar otro servicio?\");\n                pushOptions([\n                  { label: \"Sí\", value: \"yes\", trigger: \"selectService\" },\n                  { label: \"No\", value: \"no\", trigger: \"endSummary\" },\n                ]);\n              },\n              endSummary: async () => {\n                pushMessage(\"Gracias por tu información. ¡Te contactaremos pronto!\");\n              },\n              endConversation: async () => {\n                pushMessage(\"Gracias por tu interés. ¡Que tengas buen día!\");\n              },\n            });\n            // Iniciar flujo\n    setTimeout(() => {\n     setFlow(\"start\");\n   }, 500);\n }, [setFlow, pushMessage, pushOptions]);\n\n return null;\n}\n\nfunction ChatBotWidget() {\n  return (\n     <ChatBotProvider>\n     <ChatLogic />\n   </ChatBotProvider>\n  );\n}\n\nexport default ChatBotWidget;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}