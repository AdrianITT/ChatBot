{"ast":null,"code":"var _jsxFileName = \"/Users/appletech/Desktop/chatbottest/chatbottest/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { createServicioPreCotizacion, createPreCotizacion, getServicioData } from './api/Api';\nimport { Widget, addResponseMessage } from 'react-chat-widget-react-18';\nimport 'react-chat-widget-react-18/lib/styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [step, setStep] = React.useState(0);\n  const [formData, setFormData] = useState({\n    nombre: '',\n    apellido: '',\n    correo: '',\n    telefono: '',\n    empresa: '',\n    fechaSolicitud: '',\n    fechaCaducidad: '',\n    servicios: []\n  });\n  const [servicioActual, setServicioActual] = useState({});\n  const hasGreeted = React.useRef(false);\n  const [servicioTemporal, setServicioTemporal] = useState({\n    numero: null,\n    cantidad: null\n  });\n  const [servicioAEditar, setServicioAEditar] = useState(null); // puede ser un índice\n  const [campoAEditar, setCampoAEditar] = useState(null);\n  const [pasoExtra, setPasoExtra] = useState(null); // variable temporal para saber que luego viene la cantidad\n  const [servicios, setServicios] = useState([]); // Estado para almacenar los servicios\n\n  React.useEffect(() => {\n    if (!hasGreeted.current) {\n      addResponseMessage('¡Hola! Soy un chatbot. ¿Quieres crear una cotización?');\n      addResponseMessage('Para crear una cotización necesito algunos datos.');\n      addResponseMessage(\"¿Cuál es tu nombre?\");\n      hasGreeted.current = true;\n    }\n  }, []);\n  const validacionNombre = nombre => {\n    const regex = /^([A-Z][a-z]+)(\\s[A-Z][a-z]+)*$/;\n    return regex.test(nombre) && nombre.length <= 15;\n  };\n  const validacionApellido = apellido => {\n    const regex = /^[A-Z][a-zA-Z]{0,13}$/;\n    return regex.test(apellido);\n  };\n  const validacionCorreo = correo => {\n    const regex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n    return regex.test(correo);\n  };\n  const validacionTelefono = telefono => {\n    const regex = /^[0-9]{10}$/;\n    return regex.test(telefono);\n  };\n  const validacionEmpresa = empresa => {\n    const regex = /^[A-Z][a-zA-Z]{0,20}$/;\n    return regex.test(empresa);\n  };\n  /*const validacionFecha = (fecha) => {\n    const regex = /^\\d{4}-\\d{2}-\\d{2}$/;\n    return regex.test(fecha);\n  } */\n  const validacionServicio = servicio => {\n    const regex = /^[0-9]{1,3}$/;\n    return regex.test(servicio);\n  };\n  const validacionCantidad = cantidad => {\n    const regex = /^[0-9]{1,3}$/;\n    return regex.test(cantidad);\n  };\n  const mostrarResumenServicios = servicios => {\n    if (!servicios || servicios.length === 0) {\n      addResponseMessage('No hay servicios agregados.');\n      return;\n    }\n    const resumen = servicios.map((s, i) => `${i + 1}. Servicio #${s.numero}, Cantidad: ${s.cantidad}`).join('\\n');\n    addResponseMessage('Resumen de servicios 2:');\n    addResponseMessage(resumen);\n    addResponseMessage('Escribe \"OK\" para continuar:');\n  };\n  const enviarDatos = async () => {\n    try {\n      const today = new Date();\n      const fechaSolicitud = today.toISOString().split('T')[0]; // formato YYYY-MM-DD\n\n      const futureDate = new Date();\n      futureDate.setDate(today.getDate() + 30);\n      const fechaCaducidad = futureDate.toISOString().split('T')[0];\n      // Crear la pre-cotización principal\n      const preCotizacion = await createPreCotizacion({\n        nombreCliente: formData.nombre,\n        apellidoCliente: formData.apellido,\n        correo: formData.correo,\n        denominacion: \"MXN\",\n        //telefono: formData.telefono,\n        nombreEmpresa: formData.empresa,\n        fechaSolicitud: fechaSolicitud,\n        fechaCaducidad: fechaCaducidad,\n        descuento: 0,\n        iva: 1,\n        organizacion: 7,\n        tipoMoneda: 1,\n        estado: 8\n      });\n      //console.log(\"Pre-cotización creada:\", preCotizacion);\n      // Aquí puedes obtener el ID de la pre-cotización creada\n      const idPreCotizacion = preCotizacion.data.id; // Ajusta según tu respuesta\n      //console.log(\"ID de la pre-cotización:\", idPreCotizacion);\n      //console.log(\"Servicios a agregar:\", formData.servicios);\n      // Crear los servicios asociados\n      for (const servicio of formData.servicios) {\n        console.log(\"Servicio a agregar:\", servicio);\n        //console.log(\"Servicio a agregar cantidad:\", servicio.cantidad);\n        //console.log(\"Servicio a agregar numero\", servicio.numero);\n        await createServicioPreCotizacion({\n          descripcion: \"Sin descripción\",\n          precio: 0,\n          cantidad: Number(servicio.cantidad) || 0,\n          preCotizacion: idPreCotizacion,\n          servicio: Number(servicio.numero)\n        });\n      }\n      addResponseMessage(\"✅ ¡Cotización enviada exitosamente!\");\n      //console.log(\"Datos enviados:\", formData);\n    } catch (error) {\n      console.error(\"Error al enviar datos:\", error);\n      addResponseMessage(\"❌ Hubo un error al enviar la cotización. Inténtalo de nuevo.\");\n    }\n  };\n  const handleNewUserMessage = msg => {\n    if (campoAEditar !== null) {\n      let valid = false;\n      let nuevoFormData = {\n        ...formData\n      };\n      switch (campoAEditar) {\n        case 1:\n          valid = validacionNombre(msg);\n          if (valid) nuevoFormData.nombre = msg;\n          break;\n        case 2:\n          valid = validacionApellido(msg);\n          if (valid) nuevoFormData.apellido = msg;\n          break;\n        case 3:\n          valid = validacionCorreo(msg);\n          if (valid) nuevoFormData.correo = msg;\n          break;\n        case 4:\n          valid = validacionTelefono(msg);\n          if (valid) nuevoFormData.telefono = msg;\n          break;\n        case 5:\n          valid = validacionEmpresa(msg);\n          if (valid) nuevoFormData.empresa = msg;\n          break;\n        default:\n          addResponseMessage('Opción no válida. Intenta de nuevo.');\n          return;\n      }\n      if (!valid) {\n        addResponseMessage('Dato inválido. Intenta de nuevo:');\n        return;\n      }\n      setFormData(nuevoFormData);\n      setCampoAEditar(null); // salimos del modo edición\n\n      const resumen = `\n    1. Nombre: ${nuevoFormData.nombre}\n    2. Apellido: ${nuevoFormData.apellido}\n    3. Correo: ${nuevoFormData.correo}\n    4. Teléfono: ${nuevoFormData.telefono}\n    5. Empresa: ${nuevoFormData.empresa}\n      `;\n      addResponseMessage('¡Dato actualizado!');\n      addResponseMessage('Resumen actualizado:');\n      addResponseMessage(resumen);\n      addResponseMessage('¿Deseas editar otro dato? Escribe el número o \"no\" para continuar.');\n      return;\n    }\n    switch (step) {\n      case 0:\n        if (!validacionNombre(msg)) {\n          addResponseMessage('Por favor, ingresa un nombre válido (inicia con mayúscula y máximo 12 letras).');\n          addResponseMessage(\"¿Cuál es tu nombre?\");\n          return;\n        }\n        setFormData({\n          ...formData,\n          nombre: msg\n        });\n        addResponseMessage('¿Cuál es tu apellido paterno?');\n        setStep(1);\n        break;\n      case 1:\n        if (!validacionApellido(msg)) {\n          addResponseMessage('Por favor, ingresa un apellido válido (inicia con mayúscula y máximo 13 letras).');\n          addResponseMessage('¿Cuál es tu apellido paterno?');\n          return;\n        }\n        setFormData({\n          ...formData,\n          apellido: msg\n        });\n        addResponseMessage('¿Cuál es tu correo electrónico?');\n        setStep(2);\n        break;\n      case 2:\n        if (!validacionCorreo(msg)) {\n          addResponseMessage('Por favor, ingresa un correo electrónico válido.');\n          addResponseMessage('¿Cuál es tu correo electrónico?');\n          return;\n        }\n        setFormData({\n          ...formData,\n          correo: msg\n        });\n        addResponseMessage('¿Cuál es tu número telefónico?');\n        setStep(3);\n        break;\n      case 3:\n        if (!validacionTelefono(msg)) {\n          addResponseMessage('Por favor, ingresa un número telefónico válido (10 dígitos).');\n          addResponseMessage('¿Cuál es tu número telefónico?');\n          return;\n        }\n        setFormData({\n          ...formData,\n          telefono: msg\n        });\n        addResponseMessage('¿Cuál es el nombre de la empresa?');\n        setStep(4);\n        break;\n      case 4:\n        if (!validacionEmpresa(msg)) {\n          addResponseMessage('Por favor, ingresa un nombre de empresa válido (inicia con mayúscula y máximo 20 letras).');\n          addResponseMessage('¿Cuál es el nombre de la empresa?');\n          return;\n        }\n        const nuevoFormData = {\n          ...formData,\n          empresa: msg\n        };\n        setFormData(nuevoFormData);\n        addResponseMessage('¡Gracias por completar el formulario!');\n        console.log('Datos finales del formulario:', formData);\n\n        // Mostrar resumen para edición\n        const resumen = `\n      1. Nombre: ${nuevoFormData.nombre}\n      2. Apellido: ${nuevoFormData.apellido}\n      3. Correo: ${nuevoFormData.correo}\n      4. Teléfono: ${nuevoFormData.telefono}\n      5. Empresa: ${nuevoFormData.empresa}\n          `;\n        addResponseMessage('¿Deseas editar algún dato antes de enviar? Escribe el número del campo que deseas editar o \"no\" para continuar.');\n        addResponseMessage(resumen);\n        setStep(111);\n        //addResponseMessage('Ahora comenzaras a agregar los servicios');\n        //addResponseMessage('Escribe el número de servicio:');\n\n        //setStep(6);\n        break;\n      case 5:\n        if (!validacionEmpresa(msg)) {\n          addResponseMessage('Por favor, ingresa un nombre de empresa válido (inicia con mayúscula y máximo 20 letras).');\n          addResponseMessage('¿Cuál es el nombre de la empresa?');\n          return;\n        }\n        //setFormData({ ...formData, empresa: msg });\n        addResponseMessage('Ahora comenzaras a agregar los servicios');\n        addResponseMessage('Escribe el número de servicio:');\n        break;\n      case 111:\n        //console.log('Campo a editar msg:', msg);\n        if (msg.toLowerCase() === 'no') {\n          //enviarDatos();\n          //addResponseMessage('Datos enviados correctamente. ¿Deseas crear otra cotización? (sí/no)');\n          addResponseMessage('Ahora comenzaras a agregar los servicios');\n          addResponseMessage('Escribe los numeros de servicio separados por comas (Ejemplo: 1,2,3):');\n          setStep(7);\n        } else {\n          const opcion = parseInt(msg);\n          if (isNaN(opcion) || opcion < 1 || opcion > 5) {\n            addResponseMessage('Por favor, escribe un número válido entre 1 y 5, o \"no\" para continuar.');\n          } else {\n            console.log('Campo a editar:', opcion);\n            setCampoAEditar(opcion); // regresa al paso correspondiente\n            console.log('Campo a editar:', campoAEditar);\n            const preguntas = ['¿Cuál es tu nombre?', '¿Cuál es tu apellido paterno?', '¿Cuál es tu correo electrónico?', '¿Cuál es tu número telefónico?', '¿Cuál es el nombre de la empresa?'];\n            addResponseMessage(`Vamos a corregir el campo ${opcion}:`);\n            addResponseMessage(preguntas[opcion - 1]);\n          }\n        }\n        //setStep(6);\n        break;\n      case 6:\n        addResponseMessage('Ahora comenzaras a agregar los servicios');\n        addResponseMessage('Escribe los numeros de servicio separados por comas (Ejemplo: 1,2,3):');\n        setStep(7);\n        return;\n      //break;\n      case 7:\n        // Entrada de varios números de servicio\n        const numeros = msg.split(',').map(num => parseInt(num.trim())).filter(n => !isNaN(n));\n        if (numeros.length === 0) {\n          addResponseMessage('Por favor, ingresa al menos un número válido separado por comas.');\n          return;\n        }\n        setServicioTemporal({\n          ...servicioTemporal,\n          numeros\n        }); // guarda varios\n        addResponseMessage('¿Cuántos necesita de cada uno? Ingresa las cantidades separadas por comas en el mismo orden.');\n        console.log('Paso actual:', step);\n        setStep(8);\n        console.log('Paso actual:', step);\n        break;\n      case 8:\n        // Entrada de varias cantidades\n        const cantidades = msg.split(',').map(c => parseInt(c.trim())).filter(c => !isNaN(c));\n        if (cantidades.length !== servicioTemporal.numeros.length) {\n          addResponseMessage('El número de cantidades no coincide con el número de servicios. Intenta de nuevo.');\n          return;\n        }\n        const nuevosServicios = servicioTemporal.numeros.map((numero, index) => ({\n          numero,\n          cantidad: cantidades[index]\n        }));\n        setFormData(prev => ({\n          ...prev,\n          servicios: [...prev.servicios, ...nuevosServicios]\n        }));\n        setServicioTemporal({\n          numeros: []\n        });\n        /*addResponseMessage('¿Quieres agregar más servicios? (sí/no)');\n        setStep(9); */\n        const serviciosTotales = [...formData.servicios, ...nuevosServicios];\n        const resumenServicios = serviciosTotales.map((s, i) => `${i + 1}. Servicio #${s.numero}, Cantidad: ${s.cantidad}`).join('\\n');\n        addResponseMessage('Estos son los servicios agregados:');\n        addResponseMessage(resumenServicios);\n        addResponseMessage('¿Deseas editar alguno? Escribe el número del servicio en la lista o \"no\" para continuar.');\n        setStep(91);\n        break;\n      case 9:\n        if (msg.toLowerCase() === 'sí' || msg.toLowerCase() === 'si') {\n          if (formData.servicios.length === 0) {\n            addResponseMessage('No hay servicios que editar.');\n            addResponseMessage('¿Deseas agregar nuevos servicios? (sí/no)');\n            setStep(6);\n          } else {\n            // Mostrar resumen solo si el usuario dijo \"sí\"\n            /*let resumenServicios = formData.servicios.map((s, i) =>\n              `${i + 1}. Servicio #${s.numero}, Cantidad: ${s.cantidad}`\n            ).join('\\n');\n                     addResponseMessage('Estos son los servicios agregados:');\n            addResponseMessage(resumenServicios);\n            addResponseMessage('¿Deseas editar alguno? Escribe el número del servicio en la lista o \"no\" para continuar.');\n            setStep(91); */\n          }\n        } else if (msg.toLowerCase() === 'no') {\n          // El usuario no quiere editar nada, pasa directo a enviar\n          /*addResponseMessage('¡Gracias por completar el formulario!');\n          enviarDatos();\n          setStep(999);\n          console.log('Datos finales del formulario:', formData);\n          addResponseMessage('¿Deseas crear otra cotización? (sí/no)');\n          setStep(10); */\n          let resumenServicios = formData.servicios.map((s, i) => `${i + 1}. Servicio #${s.numero}, Cantidad: ${s.cantidad}`).join('\\n');\n          addResponseMessage('Estos son los servicios agregados:');\n          addResponseMessage(resumenServicios);\n          addResponseMessage('¿Deseas editar alguno? Escribe el número del servicio en la lista o \"no\" para continuar.');\n          setStep(91);\n        } else {\n          addResponseMessage('Por favor responde con \"sí\" o \"no\".');\n        }\n        break;\n      case 91:\n        if (msg.toLowerCase() === 'no') {\n          enviarDatos();\n          setStep(999);\n          addResponseMessage('¡Cotización enviada!');\n          addResponseMessage('¿Deseas crear otra cotización? (sí/no)');\n          setStep(10);\n          return;\n        }\n        const indice = parseInt(msg) - 1;\n        if (!isNaN(indice) && formData.servicios[indice]) {\n          setServicioAEditar(indice);\n          addResponseMessage(`¿Qué deseas editar del servicio #${formData.servicios[indice].numero}? (escribe: número o cantidad )`);\n          setStep(92);\n        } else {\n          addResponseMessage('Entrada no válida. Escribe el número del servicio a editar o \"no\" para continuar.');\n        }\n        break;\n      case 92:\n        const opcion = msg.toLowerCase();\n        if (opcion === 'número' || opcion === 'numero') {\n          addResponseMessage('Escribe el nuevo número del servicio:');\n          setStep(93);\n        } else if (opcion === 'cantidad') {\n          addResponseMessage('Escribe la nueva cantidad del servicio:');\n          setStep(94);\n        } else if (opcion === 'ambos') {\n          setPasoExtra('cantidad'); // variable temporal para saber que luego viene la cantidad\n          addResponseMessage('Escribe el nuevo número del servicio:');\n          setStep(93);\n        } else {\n          addResponseMessage('Opción no válida. Escribe: número, cantidad o ambos.');\n        }\n        break;\n      case 93:\n        const nuevoNumero = parseInt(msg);\n        console.log('Nuevo número:', nuevoNumero);\n        if (isNaN(nuevoNumero) || nuevoNumero <= 0) {\n          addResponseMessage('Número inválido. Ingresa un número mayor a 0.');\n          return;\n        }\n        console.log('Servicio a editar1:', servicioAEditar);\n        if (servicioAEditar === null || isNaN(servicioAEditar) || servicioAEditar < 0 || servicioAEditar >= formData.servicios.length) {\n          addResponseMessage('Error interno: no se pudo identificar el servicio a editar.');\n          setStep(91); // volver a lista de servicios\n          return;\n        }\n        console.log('Servicio a editar2:', servicioAEditar);\n        const serviciosEditados = [...formData.servicios];\n        serviciosEditados[servicioAEditar] = {\n          ...serviciosEditados[servicioAEditar],\n          numero: nuevoNumero\n        };\n        console.log('Servicios editados3:', serviciosEditados);\n        setFormData({\n          ...formData,\n          servicios: serviciosEditados\n        });\n        console.log('Servicios editados4:', serviciosEditados);\n        if (pasoExtra === 'cantidad') {\n          setPasoExtra(null);\n          setStep(94);\n          addResponseMessage('Escribe la nueva cantidad del servicio:');\n        } else {\n          setServicioAEditar(null);\n          addResponseMessage('¡Servicio actualizado!1');\n          mostrarResumenServicios(serviciosEditados);\n          setStep(91);\n        }\n        break;\n      case 94:\n        const nuevaCantidad = parseInt(msg);\n        if (isNaN(nuevaCantidad) || nuevaCantidad <= 0) {\n          addResponseMessage('Cantidad inválida. Ingresa un número mayor a 0.');\n          return;\n        }\n        const serviciosActualizados = [...formData.servicios];\n        serviciosActualizados[servicioAEditar].cantidad = nuevaCantidad;\n        setFormData({\n          ...formData,\n          servicios: serviciosActualizados\n        });\n        setServicioAEditar(null);\n        addResponseMessage('¡Cantidad actualizada!');\n        mostrarResumenServicios(serviciosActualizados);\n        setStep(91);\n        break;\n      case 10:\n        if (msg.toLowerCase() === 'sí' || msg.toLowerCase() === 'si') {\n          setFormData({\n            nombre: '',\n            apellido: '',\n            correo: '',\n            telefono: '',\n            empresa: '',\n            fechaSolicitud: '',\n            fechaCaducidad: '',\n            servicios: []\n          });\n          setServicioActual({});\n          addResponseMessage(\"Perfecto. ¿Cuál es tu nombre?\");\n          setStep(0);\n        } else {\n          addResponseMessage('¡Gracias por usar nuestro servicio!');\n          setStep(999);\n        }\n        break;\n      default:\n        addResponseMessage('Ya hemos terminado. ¡Gracias!');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Mi App con Chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 518,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Widget, {\n      handleNewUserMessage: handleNewUserMessage,\n      title: \"Chat De Cotizacion\",\n      subtitle: \"Estamos para ayudarte\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 519,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 517,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"enZnrXxThdm7kRK5kAZsJnO2ABc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","createServicioPreCotizacion","createPreCotizacion","getServicioData","Widget","addResponseMessage","jsxDEV","_jsxDEV","App","_s","step","setStep","formData","setFormData","nombre","apellido","correo","telefono","empresa","fechaSolicitud","fechaCaducidad","servicios","servicioActual","setServicioActual","hasGreeted","useRef","servicioTemporal","setServicioTemporal","numero","cantidad","servicioAEditar","setServicioAEditar","campoAEditar","setCampoAEditar","pasoExtra","setPasoExtra","setServicios","current","validacionNombre","regex","test","length","validacionApellido","validacionCorreo","validacionTelefono","validacionEmpresa","validacionServicio","servicio","validacionCantidad","mostrarResumenServicios","resumen","map","s","i","join","enviarDatos","today","Date","toISOString","split","futureDate","setDate","getDate","preCotizacion","nombreCliente","apellidoCliente","denominacion","nombreEmpresa","descuento","iva","organizacion","tipoMoneda","estado","idPreCotizacion","data","id","console","log","descripcion","precio","Number","error","handleNewUserMessage","msg","valid","nuevoFormData","toLowerCase","opcion","parseInt","isNaN","preguntas","numeros","num","trim","filter","n","cantidades","c","nuevosServicios","index","prev","serviciosTotales","resumenServicios","indice","nuevoNumero","serviciosEditados","nuevaCantidad","serviciosActualizados","className","children","fileName","_jsxFileName","lineNumber","columnNumber","title","subtitle","_c","$RefreshReg$"],"sources":["/Users/appletech/Desktop/chatbottest/chatbottest/src/App.js"],"sourcesContent":["import React,{useEffect, useState} from 'react';\nimport {createServicioPreCotizacion, createPreCotizacion, getServicioData } from './api/Api';\nimport { Widget, addResponseMessage } from 'react-chat-widget-react-18';\nimport 'react-chat-widget-react-18/lib/styles.css';\n\nfunction App() {\n  const [step, setStep] = React.useState(0);\n  const [formData, setFormData] = useState({\n    nombre: '',\n    apellido: '',\n    correo: '',\n    telefono: '',\n    empresa: '',\n    fechaSolicitud: '',\n    fechaCaducidad: '',\n    servicios: [],\n  });\n  const [servicioActual, setServicioActual] = useState({});\n  const hasGreeted = React.useRef(false);\n  const [servicioTemporal, setServicioTemporal] = useState({ numero: null, cantidad: null });\n  const [servicioAEditar, setServicioAEditar] = useState(null); // puede ser un índice\n  const [campoAEditar, setCampoAEditar] = useState(null);\n  const [pasoExtra, setPasoExtra] = useState(null); // variable temporal para saber que luego viene la cantidad\n  const [servicios, setServicios] = useState([]); // Estado para almacenar los servicios\n\n\n\n  React.useEffect(() => {\n    if (!hasGreeted.current) {\n      addResponseMessage('¡Hola! Soy un chatbot. ¿Quieres crear una cotización?');\n      addResponseMessage('Para crear una cotización necesito algunos datos.');\n      addResponseMessage(\"¿Cuál es tu nombre?\");\n      hasGreeted.current = true;\n    }\n  }, []);\n\n  const validacionNombre = (nombre) => {\n    const regex = /^([A-Z][a-z]+)(\\s[A-Z][a-z]+)*$/;\n  return regex.test(nombre) && nombre.length <= 15;\n  }\n  const validacionApellido = (apellido) => {\n    const regex = /^[A-Z][a-zA-Z]{0,13}$/;\n    return regex.test(apellido);\n  }\n  const validacionCorreo = (correo) => {\n    const regex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n    return regex.test(correo);\n  }\n  const validacionTelefono = (telefono) => {\n    const regex = /^[0-9]{10}$/;\n    return regex.test(telefono);\n  }\n  const validacionEmpresa = (empresa) => {\n    const regex = /^[A-Z][a-zA-Z]{0,20}$/;\n    return regex.test(empresa);\n  }\n  /*const validacionFecha = (fecha) => {\n    const regex = /^\\d{4}-\\d{2}-\\d{2}$/;\n    return regex.test(fecha);\n  } */\n  const validacionServicio = (servicio) => {\n    const regex = /^[0-9]{1,3}$/;\n    return regex.test(servicio);\n  }\n  const validacionCantidad = (cantidad) => {\n    const regex = /^[0-9]{1,3}$/;\n    return regex.test(cantidad);\n  }\n  const mostrarResumenServicios = (servicios) => {\n    if (!servicios || servicios.length === 0) {\n      addResponseMessage('No hay servicios agregados.');\n      return;\n    }\n  \n    const resumen = servicios.map((s, i) =>\n      `${i + 1}. Servicio #${s.numero}, Cantidad: ${s.cantidad}`\n    ).join('\\n');\n  \n    addResponseMessage('Resumen de servicios 2:');\n    addResponseMessage(resumen);\n    addResponseMessage('Escribe \"OK\" para continuar:');\n  };\n  \n\n  const enviarDatos = async () => {\n    try {\n      const today = new Date();\n      const fechaSolicitud = today.toISOString().split('T')[0]; // formato YYYY-MM-DD\n\n      const futureDate = new Date();\n      futureDate.setDate(today.getDate() + 30);\n      const fechaCaducidad = futureDate.toISOString().split('T')[0];\n      // Crear la pre-cotización principal\n      const preCotizacion = await createPreCotizacion({\n        nombreCliente: formData.nombre,\n        apellidoCliente: formData.apellido,\n        correo: formData.correo,\n        denominacion:\"MXN\",\n        //telefono: formData.telefono,\n        nombreEmpresa: formData.empresa,\n        fechaSolicitud:fechaSolicitud,\n        fechaCaducidad:fechaCaducidad,\n        descuento:0,\n        iva:1,\n        organizacion:7,\n        tipoMoneda:1,\n        estado: 8,\n      });\n      //console.log(\"Pre-cotización creada:\", preCotizacion);\n      // Aquí puedes obtener el ID de la pre-cotización creada\n      const idPreCotizacion = preCotizacion.data.id; // Ajusta según tu respuesta\n      //console.log(\"ID de la pre-cotización:\", idPreCotizacion);\n      //console.log(\"Servicios a agregar:\", formData.servicios);\n      // Crear los servicios asociados\n      for (const servicio of formData.servicios) {\n        console.log(\"Servicio a agregar:\", servicio);\n        //console.log(\"Servicio a agregar cantidad:\", servicio.cantidad);\n        //console.log(\"Servicio a agregar numero\", servicio.numero);\n        await createServicioPreCotizacion({\n          descripcion: \"Sin descripción\",\n          precio:0,\n          cantidad:    Number(servicio.cantidad)  || 0,\n          preCotizacion: idPreCotizacion,\n          servicio:    Number(servicio.numero),\n          \n        });\n      }\n  \n      addResponseMessage(\"✅ ¡Cotización enviada exitosamente!\");\n      //console.log(\"Datos enviados:\", formData);\n    } catch (error) {\n      console.error(\"Error al enviar datos:\", error);\n      addResponseMessage(\"❌ Hubo un error al enviar la cotización. Inténtalo de nuevo.\");\n    }\n  };\n        \n\n  const handleNewUserMessage = (msg) => {\n    if (campoAEditar !== null) {\n      let valid = false;\n      let nuevoFormData = { ...formData };\n    \n      switch (campoAEditar) {\n        case 1:\n          valid = validacionNombre(msg);\n          if (valid) nuevoFormData.nombre = msg;\n          break;\n        case 2:\n          valid = validacionApellido(msg);\n          if (valid) nuevoFormData.apellido = msg;\n          break;\n        case 3:\n          valid = validacionCorreo(msg);\n          if (valid) nuevoFormData.correo = msg;\n          break;\n        case 4:\n          valid = validacionTelefono(msg);\n          if (valid) nuevoFormData.telefono = msg;\n          break;\n        case 5:\n          valid = validacionEmpresa(msg);\n          if (valid) nuevoFormData.empresa = msg;\n          break;\n          default:\n            addResponseMessage('Opción no válida. Intenta de nuevo.');\n            return;\n      }\n    \n      if (!valid) {\n        addResponseMessage('Dato inválido. Intenta de nuevo:');\n        return;\n      }\n    \n      setFormData(nuevoFormData);\n      setCampoAEditar(null); // salimos del modo edición\n    \n      const resumen = `\n    1. Nombre: ${nuevoFormData.nombre}\n    2. Apellido: ${nuevoFormData.apellido}\n    3. Correo: ${nuevoFormData.correo}\n    4. Teléfono: ${nuevoFormData.telefono}\n    5. Empresa: ${nuevoFormData.empresa}\n      `;\n      addResponseMessage('¡Dato actualizado!');\n      addResponseMessage('Resumen actualizado:');\n      addResponseMessage(resumen);\n      addResponseMessage('¿Deseas editar otro dato? Escribe el número o \"no\" para continuar.');\n    \n      return;\n    }\n    \n    switch (step) {\n      case 0:\n        if (!validacionNombre(msg)) {\n          addResponseMessage('Por favor, ingresa un nombre válido (inicia con mayúscula y máximo 12 letras).');\n          addResponseMessage(\"¿Cuál es tu nombre?\");\n          return;\n        }\n        setFormData({ ...formData, nombre: msg });\n        addResponseMessage('¿Cuál es tu apellido paterno?');\n        setStep(1);\n        break;\n      case 1:\n        if(!validacionApellido(msg)) {\n          addResponseMessage('Por favor, ingresa un apellido válido (inicia con mayúscula y máximo 13 letras).');\n          addResponseMessage('¿Cuál es tu apellido paterno?');\n          return;\n        }\n        setFormData({ ...formData, apellido: msg });\n        addResponseMessage('¿Cuál es tu correo electrónico?');\n        setStep(2);\n        break;\n      case 2:\n        if (!validacionCorreo(msg)) {\n          addResponseMessage('Por favor, ingresa un correo electrónico válido.');\n          addResponseMessage('¿Cuál es tu correo electrónico?');\n          return;\n        }\n        setFormData({ ...formData, correo: msg });\n        addResponseMessage('¿Cuál es tu número telefónico?');\n        setStep(3);\n        break;\n      case 3:\n        if (!validacionTelefono(msg)) {\n          addResponseMessage('Por favor, ingresa un número telefónico válido (10 dígitos).');\n          addResponseMessage('¿Cuál es tu número telefónico?');\n          return;\n        }\n        setFormData({ ...formData, telefono: msg });\n        addResponseMessage('¿Cuál es el nombre de la empresa?');\n        setStep(4);\n        break;\n      case 4:\n        if (!validacionEmpresa(msg)) {\n          addResponseMessage('Por favor, ingresa un nombre de empresa válido (inicia con mayúscula y máximo 20 letras).');\n          addResponseMessage('¿Cuál es el nombre de la empresa?');\n          return;\n        }\n        const nuevoFormData = { ...formData, empresa: msg };\n        setFormData(nuevoFormData);\n        addResponseMessage('¡Gracias por completar el formulario!');\n          console.log('Datos finales del formulario:', formData);\n      \n          // Mostrar resumen para edición\n          const resumen = `\n      1. Nombre: ${nuevoFormData.nombre}\n      2. Apellido: ${nuevoFormData.apellido}\n      3. Correo: ${nuevoFormData.correo}\n      4. Teléfono: ${nuevoFormData.telefono}\n      5. Empresa: ${nuevoFormData.empresa}\n          `;\n          addResponseMessage('¿Deseas editar algún dato antes de enviar? Escribe el número del campo que deseas editar o \"no\" para continuar.');\n          addResponseMessage(resumen);\n          setStep(111);\n        //addResponseMessage('Ahora comenzaras a agregar los servicios');\n        //addResponseMessage('Escribe el número de servicio:');\n        \n        //setStep(6);\n        break;\n      case 5:\n        if (!validacionEmpresa(msg)) {\n          addResponseMessage('Por favor, ingresa un nombre de empresa válido (inicia con mayúscula y máximo 20 letras).');\n          addResponseMessage('¿Cuál es el nombre de la empresa?');\n          return;\n        }\n        //setFormData({ ...formData, empresa: msg });\n         addResponseMessage('Ahora comenzaras a agregar los servicios');\n        addResponseMessage('Escribe el número de servicio:');\n    \n        break;\n\n      case 111:\n        //console.log('Campo a editar msg:', msg);\n        if (msg.toLowerCase() === 'no') {\n          //enviarDatos();\n          //addResponseMessage('Datos enviados correctamente. ¿Deseas crear otra cotización? (sí/no)');\n          addResponseMessage('Ahora comenzaras a agregar los servicios');\n          addResponseMessage('Escribe los numeros de servicio separados por comas (Ejemplo: 1,2,3):');\n          setStep(7);\n        } else {\n          const opcion = parseInt(msg);\n          if (isNaN(opcion) || opcion < 1 || opcion > 5) {\n            addResponseMessage('Por favor, escribe un número válido entre 1 y 5, o \"no\" para continuar.');\n          } else {\n            console.log('Campo a editar:', opcion);\n            setCampoAEditar(opcion); // regresa al paso correspondiente\n            console.log('Campo a editar:', campoAEditar);\n            const preguntas = [\n              '¿Cuál es tu nombre?',\n              '¿Cuál es tu apellido paterno?',\n              '¿Cuál es tu correo electrónico?',\n              '¿Cuál es tu número telefónico?',\n              '¿Cuál es el nombre de la empresa?'\n            ];\n            addResponseMessage(`Vamos a corregir el campo ${opcion}:`);\n            addResponseMessage(preguntas[opcion -1]);\n\n          }\n        }\n        //setStep(6);\n        break;\n      \n      case 6:\n        addResponseMessage('Ahora comenzaras a agregar los servicios');\n        addResponseMessage('Escribe los numeros de servicio separados por comas (Ejemplo: 1,2,3):');\n        \n        setStep(7);\n        return;\n        //break;\n      case 7:\n              // Entrada de varios números de servicio\n        const numeros = msg.split(',').map(num => parseInt(num.trim())).filter(n => !isNaN(n));\n        if (numeros.length === 0) {\n          addResponseMessage('Por favor, ingresa al menos un número válido separado por comas.');\n          return;\n        }\n        setServicioTemporal({ ...servicioTemporal, numeros }); // guarda varios\n        addResponseMessage('¿Cuántos necesita de cada uno? Ingresa las cantidades separadas por comas en el mismo orden.');\n        console.log('Paso actual:', step);\n\n        setStep(8);\n        console.log('Paso actual:', step);\n\n        break;\n      case 8:\n        // Entrada de varias cantidades\n        const cantidades = msg.split(',').map(c => parseInt(c.trim())).filter(c => !isNaN(c));\n        if (cantidades.length !== servicioTemporal.numeros.length) {\n          addResponseMessage('El número de cantidades no coincide con el número de servicios. Intenta de nuevo.');\n          return;\n        }\n\n        const nuevosServicios = servicioTemporal.numeros.map((numero, index) => ({\n          numero,\n          cantidad: cantidades[index]\n        }));\n\n        setFormData(prev => ({\n          ...prev,\n          servicios: [...prev.servicios, ...nuevosServicios]\n        }));\n        setServicioTemporal({ numeros: [] });\n        /*addResponseMessage('¿Quieres agregar más servicios? (sí/no)');\n        setStep(9); */\n        const serviciosTotales = [...formData.servicios, ...nuevosServicios];\n        const resumenServicios = serviciosTotales.map((s, i) =>\n          `${i + 1}. Servicio #${s.numero}, Cantidad: ${s.cantidad}`\n        ).join('\\n');\n  \n        addResponseMessage('Estos son los servicios agregados:');\n        addResponseMessage(resumenServicios);\n        addResponseMessage('¿Deseas editar alguno? Escribe el número del servicio en la lista o \"no\" para continuar.');\n        setStep(91);\n        break;\n        \n      case 9:\n          if (msg.toLowerCase() === 'sí' || msg.toLowerCase() === 'si') {\n            if (formData.servicios.length === 0) {\n              addResponseMessage('No hay servicios que editar.');\n              addResponseMessage('¿Deseas agregar nuevos servicios? (sí/no)');\n              setStep(6);\n            } else {\n              // Mostrar resumen solo si el usuario dijo \"sí\"\n              /*let resumenServicios = formData.servicios.map((s, i) =>\n                `${i + 1}. Servicio #${s.numero}, Cantidad: ${s.cantidad}`\n              ).join('\\n');\n        \n              addResponseMessage('Estos son los servicios agregados:');\n              addResponseMessage(resumenServicios);\n              addResponseMessage('¿Deseas editar alguno? Escribe el número del servicio en la lista o \"no\" para continuar.');\n              setStep(91); */\n            }\n          } else if (msg.toLowerCase() === 'no') {\n            // El usuario no quiere editar nada, pasa directo a enviar\n            /*addResponseMessage('¡Gracias por completar el formulario!');\n            enviarDatos();\n            setStep(999);\n            console.log('Datos finales del formulario:', formData);\n            addResponseMessage('¿Deseas crear otra cotización? (sí/no)');\n            setStep(10); */\n            let resumenServicios = formData.servicios.map((s, i) =>\n              `${i + 1}. Servicio #${s.numero}, Cantidad: ${s.cantidad}`\n            ).join('\\n');\n      \n            addResponseMessage('Estos son los servicios agregados:');\n            addResponseMessage(resumenServicios);\n            addResponseMessage('¿Deseas editar alguno? Escribe el número del servicio en la lista o \"no\" para continuar.');\n            setStep(91);\n          } else {\n            addResponseMessage('Por favor responde con \"sí\" o \"no\".');\n          }\n          break;\n        \n\n        case 91:\n            if (msg.toLowerCase() === 'no') {\n            enviarDatos();\n            setStep(999);\n            addResponseMessage('¡Cotización enviada!');\n            addResponseMessage('¿Deseas crear otra cotización? (sí/no)');\n            setStep(10);\n            return;\n            }\n\n            const indice = parseInt(msg) - 1;\n            if (!isNaN(indice) && formData.servicios[indice]) {\n            setServicioAEditar(indice);\n            addResponseMessage(`¿Qué deseas editar del servicio #${formData.servicios[indice].numero}? (escribe: número o cantidad )`);\n            setStep(92);\n            } else {\n            addResponseMessage('Entrada no válida. Escribe el número del servicio a editar o \"no\" para continuar.');\n            }\n            break;\n\n        case 92:\n          const opcion = msg.toLowerCase();\n          if (opcion === 'número' || opcion === 'numero') {\n            addResponseMessage('Escribe el nuevo número del servicio:');\n            setStep(93);\n          } else if (opcion === 'cantidad') {\n            addResponseMessage('Escribe la nueva cantidad del servicio:');\n            setStep(94);\n          } else if (opcion === 'ambos') {\n            setPasoExtra('cantidad'); // variable temporal para saber que luego viene la cantidad\n            addResponseMessage('Escribe el nuevo número del servicio:');\n            setStep(93);\n          } else {\n            addResponseMessage('Opción no válida. Escribe: número, cantidad o ambos.');\n          }\n          \n          break;\n        case 93:\n          const nuevoNumero = parseInt(msg);\n          console.log('Nuevo número:', nuevoNumero);\n          if (isNaN(nuevoNumero) || nuevoNumero <= 0) {\n            addResponseMessage('Número inválido. Ingresa un número mayor a 0.');\n            return;\n          }\n          console.log('Servicio a editar1:', servicioAEditar);\n          if (\n            servicioAEditar === null ||\n            isNaN(servicioAEditar) ||\n            servicioAEditar < 0 ||\n            servicioAEditar >= formData.servicios.length\n          ) {\n            addResponseMessage('Error interno: no se pudo identificar el servicio a editar.');\n            setStep(91); // volver a lista de servicios\n            return;\n          }\n          console.log('Servicio a editar2:', servicioAEditar);\n          const serviciosEditados = [...formData.servicios];\n          serviciosEditados[servicioAEditar] = {\n            ...serviciosEditados[servicioAEditar],\n            numero: nuevoNumero,\n          };\n          console.log('Servicios editados3:', serviciosEditados);\n          setFormData({ ...formData, servicios: serviciosEditados });\n          console.log('Servicios editados4:', serviciosEditados);  \n          if (pasoExtra === 'cantidad') {\n            setPasoExtra(null);\n            setStep(94);\n            addResponseMessage('Escribe la nueva cantidad del servicio:');\n          } else {\n            setServicioAEditar(null);\n            addResponseMessage('¡Servicio actualizado!1');\n            mostrarResumenServicios(serviciosEditados);\n            setStep(91);\n          }\n\n          break;\n        \n        case 94:\n          const nuevaCantidad = parseInt(msg);\n          if (isNaN(nuevaCantidad) || nuevaCantidad <= 0) {\n            addResponseMessage('Cantidad inválida. Ingresa un número mayor a 0.');\n            return;\n          }\n\n          const serviciosActualizados = [...formData.servicios];\n          serviciosActualizados[servicioAEditar].cantidad = nuevaCantidad;\n          setFormData({ ...formData, servicios: serviciosActualizados });\n\n          setServicioAEditar(null);\n          addResponseMessage('¡Cantidad actualizada!');\n          mostrarResumenServicios(serviciosActualizados);\n          setStep(91);\n\n          break;\n\n        \n      case 10:\n        if (msg.toLowerCase() === 'sí' || msg.toLowerCase() === 'si') {\n          setFormData({\n            nombre: '',\n            apellido: '',\n            correo: '',\n            telefono: '',\n            empresa: '',\n            fechaSolicitud: '',\n            fechaCaducidad: '',\n            servicios: [],\n          });\n          setServicioActual({});\n          addResponseMessage(\"Perfecto. ¿Cuál es tu nombre?\");\n          setStep(0);\n        } else {\n          addResponseMessage('¡Gracias por usar nuestro servicio!');\n          setStep(999);\n        }\n        break;\n      default:\n        addResponseMessage('Ya hemos terminado. ¡Gracias!');\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Mi App con Chat</h1>\n      <Widget\n        handleNewUserMessage={handleNewUserMessage}\n        title=\"Chat De Cotizacion\"\n        subtitle=\"Estamos para ayudarte\"\n      />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}