{"ast":null,"code":"var _jsxFileName = \"/Users/appletech/Desktop/chatbottest/chatbottest/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { createServicioPreCotizacion, createPreCotizacion, getServicioData } from './api/Api';\nimport { Widget, addResponseMessage } from 'react-chat-widget-react-18';\nimport 'react-chat-widget-react-18/lib/styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [step, setStep] = React.useState(0);\n  const [formData, setFormData] = useState({\n    nombre: '',\n    apellido: '',\n    correo: '',\n    telefono: '',\n    empresa: '',\n    fechaSolicitud: '',\n    fechaCaducidad: '',\n    servicios: []\n  });\n  const [servicioActual, setServicioActual] = useState({});\n  const hasGreeted = React.useRef(false);\n  const [servicioTemporal, setServicioTemporal] = useState({\n    numero: null,\n    cantidad: null\n  });\n  const [editandoServicios, setEditandoServicios] = useState(false);\n  const [campoAEditar, setCampoAEditar] = useState(null);\n  React.useEffect(() => {\n    if (!hasGreeted.current) {\n      addResponseMessage('¡Hola! Soy un chatbot. ¿Quieres crear una cotización?');\n      addResponseMessage('Para crear una cotización necesito algunos datos.');\n      addResponseMessage(\"¿Cuál es tu nombre?\");\n      hasGreeted.current = true;\n    }\n  }, []);\n  const validacionNombre = nombre => {\n    const regex = /^([A-Z][a-z]+)(\\s[A-Z][a-z]+)*$/;\n    return regex.test(nombre) && nombre.length <= 15;\n  };\n  const validacionApellido = apellido => {\n    const regex = /^[A-Z][a-zA-Z]{0,13}$/;\n    return regex.test(apellido);\n  };\n  const validacionCorreo = correo => {\n    const regex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n    return regex.test(correo);\n  };\n  const validacionTelefono = telefono => {\n    const regex = /^[0-9]{10}$/;\n    return regex.test(telefono);\n  };\n  const validacionEmpresa = empresa => {\n    const regex = /^[A-Z][a-zA-Z]{0,20}$/;\n    return regex.test(empresa);\n  };\n  /*const validacionFecha = (fecha) => {\n    const regex = /^\\d{4}-\\d{2}-\\d{2}$/;\n    return regex.test(fecha);\n  } */\n  const validacionServicio = servicio => {\n    const regex = /^[0-9]{1,3}$/;\n    return regex.test(servicio);\n  };\n  const validacionCantidad = cantidad => {\n    const regex = /^[0-9]{1,3}$/;\n    return regex.test(cantidad);\n  };\n  const enviarDatos = async () => {\n    try {\n      const today = new Date();\n      const fechaSolicitud = today.toISOString().split('T')[0]; // formato YYYY-MM-DD\n\n      const futureDate = new Date();\n      futureDate.setDate(today.getDate() + 30);\n      const fechaCaducidad = futureDate.toISOString().split('T')[0];\n      // Crear la pre-cotización principal\n      const preCotizacion = await createPreCotizacion({\n        nombreCliente: formData.nombre,\n        apellidoCliente: formData.apellido,\n        correo: formData.correo,\n        denominacion: \"MXN\",\n        //telefono: formData.telefono,\n        nombreEmpresa: formData.empresa,\n        fechaSolicitud: fechaSolicitud,\n        fechaCaducidad: fechaCaducidad,\n        descuento: 0,\n        iva: 1,\n        organizacion: 7,\n        tipoMoneda: 1,\n        estado: 8\n      });\n      //console.log(\"Pre-cotización creada:\", preCotizacion);\n      // Aquí puedes obtener el ID de la pre-cotización creada\n      const idPreCotizacion = preCotizacion.data.id; // Ajusta según tu respuesta\n      //console.log(\"ID de la pre-cotización:\", idPreCotizacion);\n      //console.log(\"Servicios a agregar:\", formData.servicios);\n      // Crear los servicios asociados\n      for (const servicio of formData.servicios) {\n        console.log(\"Servicio a agregar:\", servicio);\n        //console.log(\"Servicio a agregar cantidad:\", servicio.cantidad);\n        //console.log(\"Servicio a agregar numero\", servicio.numero);\n        await createServicioPreCotizacion({\n          descripcion: \"Sin descripción\",\n          precio: 0,\n          cantidad: Number(servicio.cantidad) || 0,\n          preCotizacion: idPreCotizacion,\n          servicio: Number(servicio.numero)\n        });\n      }\n      addResponseMessage(\"✅ ¡Cotización enviada exitosamente!\");\n      //console.log(\"Datos enviados:\", formData);\n    } catch (error) {\n      console.error(\"Error al enviar datos:\", error);\n      addResponseMessage(\"❌ Hubo un error al enviar la cotización. Inténtalo de nuevo.\");\n    }\n  };\n  const handleNewUserMessage = msg => {\n    if (campoAEditar !== null) {\n      let valid = false;\n      let nuevoFormData = {\n        ...formData\n      };\n      switch (campoAEditar) {\n        case 1:\n          valid = validacionNombre(msg);\n          if (valid) nuevoFormData.nombre = msg;\n          break;\n        case 2:\n          valid = validacionApellido(msg);\n          if (valid) nuevoFormData.apellido = msg;\n          break;\n        case 3:\n          valid = validacionCorreo(msg);\n          if (valid) nuevoFormData.correo = msg;\n          break;\n        case 4:\n          valid = validacionTelefono(msg);\n          if (valid) nuevoFormData.telefono = msg;\n          break;\n        case 5:\n          valid = validacionEmpresa(msg);\n          if (valid) nuevoFormData.empresa = msg;\n          break;\n        default:\n          addResponseMessage('Opción no válida. Intenta de nuevo.');\n          return;\n      }\n      if (!valid) {\n        addResponseMessage('Dato inválido. Intenta de nuevo:');\n        return;\n      }\n      setFormData(nuevoFormData);\n      setCampoAEditar(null); // salimos del modo edición\n\n      const resumen = `\n    1. Nombre: ${nuevoFormData.nombre}\n    2. Apellido: ${nuevoFormData.apellido}\n    3. Correo: ${nuevoFormData.correo}\n    4. Teléfono: ${nuevoFormData.telefono}\n    5. Empresa: ${nuevoFormData.empresa}\n      `;\n      addResponseMessage('¡Dato actualizado!');\n      addResponseMessage('Resumen actualizado:');\n      addResponseMessage(resumen);\n      addResponseMessage('¿Deseas editar otro dato? Escribe el número o \"no\" para continuar.');\n      return;\n    }\n    switch (step) {\n      case 0:\n        if (!validacionNombre(msg)) {\n          addResponseMessage('Por favor, ingresa un nombre válido (inicia con mayúscula y máximo 12 letras).');\n          addResponseMessage(\"¿Cuál es tu nombre?\");\n          return;\n        }\n        setFormData({\n          ...formData,\n          nombre: msg\n        });\n        addResponseMessage('¿Cuál es tu apellido paterno?');\n        setStep(1);\n        break;\n      case 1:\n        if (!validacionApellido(msg)) {\n          addResponseMessage('Por favor, ingresa un apellido válido (inicia con mayúscula y máximo 13 letras).');\n          addResponseMessage('¿Cuál es tu apellido paterno?');\n          return;\n        }\n        setFormData({\n          ...formData,\n          apellido: msg\n        });\n        addResponseMessage('¿Cuál es tu correo electrónico?');\n        setStep(2);\n        break;\n      case 2:\n        if (!validacionCorreo(msg)) {\n          addResponseMessage('Por favor, ingresa un correo electrónico válido.');\n          addResponseMessage('¿Cuál es tu correo electrónico?');\n          return;\n        }\n        setFormData({\n          ...formData,\n          correo: msg\n        });\n        addResponseMessage('¿Cuál es tu número telefónico?');\n        setStep(3);\n        break;\n      case 3:\n        if (!validacionTelefono(msg)) {\n          addResponseMessage('Por favor, ingresa un número telefónico válido (10 dígitos).');\n          addResponseMessage('¿Cuál es tu número telefónico?');\n          return;\n        }\n        setFormData({\n          ...formData,\n          telefono: msg\n        });\n        addResponseMessage('¿Cuál es el nombre de la empresa?');\n        setStep(4);\n        break;\n      case 4:\n        if (!validacionEmpresa(msg)) {\n          addResponseMessage('Por favor, ingresa un nombre de empresa válido (inicia con mayúscula y máximo 20 letras).');\n          addResponseMessage('¿Cuál es el nombre de la empresa?');\n          return;\n        }\n        const nuevoFormData = {\n          ...formData,\n          empresa: msg\n        };\n        setFormData(nuevoFormData);\n        addResponseMessage('¡Gracias por completar el formulario!');\n        console.log('Datos finales del formulario:', formData);\n\n        // Mostrar resumen para edición\n        const resumen = `\n      1. Nombre: ${nuevoFormData.nombre}\n      2. Apellido: ${nuevoFormData.apellido}\n      3. Correo: ${nuevoFormData.correo}\n      4. Teléfono: ${nuevoFormData.telefono}\n      5. Empresa: ${nuevoFormData.empresa}\n          `;\n        addResponseMessage('¿Deseas editar algún dato antes de enviar? Escribe el número del campo que deseas editar o \"no\" para continuar.');\n        addResponseMessage(resumen);\n        setStep(111);\n        //addResponseMessage('Ahora comenzaras a agregar los servicios');\n        //addResponseMessage('Escribe el número de servicio:');\n\n        //setStep(6);\n        break;\n      case 5:\n        if (!validacionEmpresa(msg)) {\n          addResponseMessage('Por favor, ingresa un nombre de empresa válido (inicia con mayúscula y máximo 20 letras).');\n          addResponseMessage('¿Cuál es el nombre de la empresa?');\n          return;\n        }\n        //setFormData({ ...formData, empresa: msg });\n        addResponseMessage('Ahora comenzaras a agregar los servicios');\n        addResponseMessage('Escribe el número de servicio:');\n        break;\n      case 111:\n        //console.log('Campo a editar msg:', msg);\n        if (msg.toLowerCase() === 'no') {\n          //enviarDatos();\n          //addResponseMessage('Datos enviados correctamente. ¿Deseas crear otra cotización? (sí/no)');\n          addResponseMessage('Ahora comenzaras a agregar los servicios');\n          addResponseMessage('Escribe el número de servicio:');\n          setStep(7);\n        } else {\n          const opcion = parseInt(msg);\n          if (isNaN(opcion) || opcion < 1 || opcion > 5) {\n            addResponseMessage('Por favor, escribe un número válido entre 1 y 5, o \"no\" para continuar.');\n          } else {\n            console.log('Campo a editar:', opcion);\n            setCampoAEditar(opcion); // regresa al paso correspondiente\n            console.log('Campo a editar:', campoAEditar);\n            const preguntas = ['¿Cuál es tu nombre?', '¿Cuál es tu apellido paterno?', '¿Cuál es tu correo electrónico?', '¿Cuál es tu número telefónico?', '¿Cuál es el nombre de la empresa?'];\n            addResponseMessage(`Vamos a corregir el campo ${opcion}:`);\n            addResponseMessage(preguntas[opcion]);\n          }\n        }\n        setStep(6);\n        break;\n      case 6:\n        addResponseMessage('Ahora comenzaras a agregar los servicios');\n        addResponseMessage('Escribe el número de servicio:');\n        setStep(7);\n        return;\n      //break;\n      case 7:\n        // Entrada de varios números de servicio\n        const numeros = msg.split(',').map(num => parseInt(num.trim())).filter(n => !isNaN(n));\n        if (numeros.length === 0) {\n          addResponseMessage('Por favor, ingresa al menos un número válido separado por comas.');\n          return;\n        }\n        setServicioTemporal({\n          ...servicioTemporal,\n          numeros\n        }); // guarda varios\n        addResponseMessage('¿Cuántos necesita de cada uno? Ingresa las cantidades separadas por comas en el mismo orden.');\n        setStep(8);\n        break;\n      case 8:\n        // Entrada de varias cantidades\n        const cantidades = msg.split(',').map(c => parseInt(c.trim())).filter(c => !isNaN(c));\n        if (cantidades.length !== servicioTemporal.numeros.length) {\n          addResponseMessage('El número de cantidades no coincide con el número de servicios. Intenta de nuevo.');\n          return;\n        }\n        const nuevosServicios = servicioTemporal.numeros.map((numero, index) => ({\n          numero,\n          cantidad: cantidades[index]\n        }));\n        setFormData(prev => ({\n          ...prev,\n          servicios: [...prev.servicios, ...nuevosServicios]\n        }));\n        setServicioTemporal({\n          numeros: []\n        });\n        addResponseMessage('¿Quieres agregar más servicios? (sí/no)');\n        setStep(9);\n        break;\n      case 9:\n        if (msg.toLowerCase() === 'sí' || msg.toLowerCase() === 'si') {\n          addResponseMessage('Escribe el número de servicio:');\n          setStep(6);\n        } else {\n          addResponseMessage('¡Gracias por completar el formulario!');\n          enviarDatos();\n          setStep(999);\n          console.log('Datos finales del formulario:', formData);\n          addResponseMessage('¿Deseas crear otra cotización? (sí/no)');\n          setStep(10);\n        }\n        break;\n      case 10:\n        if (msg.toLowerCase() === 'sí' || msg.toLowerCase() === 'si') {\n          setFormData({\n            nombre: '',\n            apellido: '',\n            correo: '',\n            telefono: '',\n            empresa: '',\n            fechaSolicitud: '',\n            fechaCaducidad: '',\n            servicios: []\n          });\n          setServicioActual({});\n          addResponseMessage(\"Perfecto. ¿Cuál es tu nombre?\");\n          setStep(0);\n        } else {\n          addResponseMessage('¡Gracias por usar nuestro servicio!');\n          setStep(999);\n        }\n        break;\n      default:\n        addResponseMessage('Ya hemos terminado. ¡Gracias!');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Mi App con Chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Widget, {\n      handleNewUserMessage: handleNewUserMessage,\n      title: \"Chat De Cotizacion\",\n      subtitle: \"Estamos para ayudarte\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 362,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"/ZHgP2/3bS/bw3orkLl357/Y5LE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","createServicioPreCotizacion","createPreCotizacion","getServicioData","Widget","addResponseMessage","jsxDEV","_jsxDEV","App","_s","step","setStep","formData","setFormData","nombre","apellido","correo","telefono","empresa","fechaSolicitud","fechaCaducidad","servicios","servicioActual","setServicioActual","hasGreeted","useRef","servicioTemporal","setServicioTemporal","numero","cantidad","editandoServicios","setEditandoServicios","campoAEditar","setCampoAEditar","current","validacionNombre","regex","test","length","validacionApellido","validacionCorreo","validacionTelefono","validacionEmpresa","validacionServicio","servicio","validacionCantidad","enviarDatos","today","Date","toISOString","split","futureDate","setDate","getDate","preCotizacion","nombreCliente","apellidoCliente","denominacion","nombreEmpresa","descuento","iva","organizacion","tipoMoneda","estado","idPreCotizacion","data","id","console","log","descripcion","precio","Number","error","handleNewUserMessage","msg","valid","nuevoFormData","resumen","toLowerCase","opcion","parseInt","isNaN","preguntas","numeros","map","num","trim","filter","n","cantidades","c","nuevosServicios","index","prev","className","children","fileName","_jsxFileName","lineNumber","columnNumber","title","subtitle","_c","$RefreshReg$"],"sources":["/Users/appletech/Desktop/chatbottest/chatbottest/src/App.js"],"sourcesContent":["import React,{useEffect, useState} from 'react';\nimport {createServicioPreCotizacion, createPreCotizacion, getServicioData } from './api/Api';\nimport { Widget, addResponseMessage } from 'react-chat-widget-react-18';\nimport 'react-chat-widget-react-18/lib/styles.css';\n\nfunction App() {\n  const [step, setStep] = React.useState(0);\n  const [formData, setFormData] = useState({\n    nombre: '',\n    apellido: '',\n    correo: '',\n    telefono: '',\n    empresa: '',\n    fechaSolicitud: '',\n    fechaCaducidad: '',\n    servicios: [],\n  });\n  const [servicioActual, setServicioActual] = useState({});\n  const hasGreeted = React.useRef(false);\n  const [servicioTemporal, setServicioTemporal] = useState({ numero: null, cantidad: null });\n  const [editandoServicios, setEditandoServicios] = useState(false);\n  const [campoAEditar, setCampoAEditar] = useState(null);\n\n\n\n  React.useEffect(() => {\n    if (!hasGreeted.current) {\n      addResponseMessage('¡Hola! Soy un chatbot. ¿Quieres crear una cotización?');\n      addResponseMessage('Para crear una cotización necesito algunos datos.');\n      addResponseMessage(\"¿Cuál es tu nombre?\");\n      hasGreeted.current = true;\n    }\n  }, []);\n\n  const validacionNombre = (nombre) => {\n    const regex = /^([A-Z][a-z]+)(\\s[A-Z][a-z]+)*$/;\n  return regex.test(nombre) && nombre.length <= 15;\n  }\n  const validacionApellido = (apellido) => {\n    const regex = /^[A-Z][a-zA-Z]{0,13}$/;\n    return regex.test(apellido);\n  }\n  const validacionCorreo = (correo) => {\n    const regex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n    return regex.test(correo);\n  }\n  const validacionTelefono = (telefono) => {\n    const regex = /^[0-9]{10}$/;\n    return regex.test(telefono);\n  }\n  const validacionEmpresa = (empresa) => {\n    const regex = /^[A-Z][a-zA-Z]{0,20}$/;\n    return regex.test(empresa);\n  }\n  /*const validacionFecha = (fecha) => {\n    const regex = /^\\d{4}-\\d{2}-\\d{2}$/;\n    return regex.test(fecha);\n  } */\n  const validacionServicio = (servicio) => {\n    const regex = /^[0-9]{1,3}$/;\n    return regex.test(servicio);\n  }\n  const validacionCantidad = (cantidad) => {\n    const regex = /^[0-9]{1,3}$/;\n    return regex.test(cantidad);\n  }\n\n  const enviarDatos = async () => {\n    try {\n      const today = new Date();\n      const fechaSolicitud = today.toISOString().split('T')[0]; // formato YYYY-MM-DD\n\n      const futureDate = new Date();\n      futureDate.setDate(today.getDate() + 30);\n      const fechaCaducidad = futureDate.toISOString().split('T')[0];\n      // Crear la pre-cotización principal\n      const preCotizacion = await createPreCotizacion({\n        nombreCliente: formData.nombre,\n        apellidoCliente: formData.apellido,\n        correo: formData.correo,\n        denominacion:\"MXN\",\n        //telefono: formData.telefono,\n        nombreEmpresa: formData.empresa,\n        fechaSolicitud:fechaSolicitud,\n        fechaCaducidad:fechaCaducidad,\n        descuento:0,\n        iva:1,\n        organizacion:7,\n        tipoMoneda:1,\n        estado: 8,\n      });\n      //console.log(\"Pre-cotización creada:\", preCotizacion);\n      // Aquí puedes obtener el ID de la pre-cotización creada\n      const idPreCotizacion = preCotizacion.data.id; // Ajusta según tu respuesta\n      //console.log(\"ID de la pre-cotización:\", idPreCotizacion);\n      //console.log(\"Servicios a agregar:\", formData.servicios);\n      // Crear los servicios asociados\n      for (const servicio of formData.servicios) {\n        console.log(\"Servicio a agregar:\", servicio);\n        //console.log(\"Servicio a agregar cantidad:\", servicio.cantidad);\n        //console.log(\"Servicio a agregar numero\", servicio.numero);\n        await createServicioPreCotizacion({\n          descripcion: \"Sin descripción\",\n          precio:0,\n          cantidad:    Number(servicio.cantidad)  || 0,\n          preCotizacion: idPreCotizacion,\n          servicio:    Number(servicio.numero),\n          \n        });\n      }\n  \n      addResponseMessage(\"✅ ¡Cotización enviada exitosamente!\");\n      //console.log(\"Datos enviados:\", formData);\n    } catch (error) {\n      console.error(\"Error al enviar datos:\", error);\n      addResponseMessage(\"❌ Hubo un error al enviar la cotización. Inténtalo de nuevo.\");\n    }\n  };\n        \n\n  const handleNewUserMessage = (msg) => {\n    if (campoAEditar !== null) {\n      let valid = false;\n      let nuevoFormData = { ...formData };\n    \n      switch (campoAEditar) {\n        case 1:\n          valid = validacionNombre(msg);\n          if (valid) nuevoFormData.nombre = msg;\n          break;\n        case 2:\n          valid = validacionApellido(msg);\n          if (valid) nuevoFormData.apellido = msg;\n          break;\n        case 3:\n          valid = validacionCorreo(msg);\n          if (valid) nuevoFormData.correo = msg;\n          break;\n        case 4:\n          valid = validacionTelefono(msg);\n          if (valid) nuevoFormData.telefono = msg;\n          break;\n        case 5:\n          valid = validacionEmpresa(msg);\n          if (valid) nuevoFormData.empresa = msg;\n          break;\n          default:\n            addResponseMessage('Opción no válida. Intenta de nuevo.');\n            return;\n      }\n    \n      if (!valid) {\n        addResponseMessage('Dato inválido. Intenta de nuevo:');\n        return;\n      }\n    \n      setFormData(nuevoFormData);\n      setCampoAEditar(null); // salimos del modo edición\n    \n      const resumen = `\n    1. Nombre: ${nuevoFormData.nombre}\n    2. Apellido: ${nuevoFormData.apellido}\n    3. Correo: ${nuevoFormData.correo}\n    4. Teléfono: ${nuevoFormData.telefono}\n    5. Empresa: ${nuevoFormData.empresa}\n      `;\n      addResponseMessage('¡Dato actualizado!');\n      addResponseMessage('Resumen actualizado:');\n      addResponseMessage(resumen);\n      addResponseMessage('¿Deseas editar otro dato? Escribe el número o \"no\" para continuar.');\n    \n      return;\n    }\n    \n    switch (step) {\n      case 0:\n        if (!validacionNombre(msg)) {\n          addResponseMessage('Por favor, ingresa un nombre válido (inicia con mayúscula y máximo 12 letras).');\n          addResponseMessage(\"¿Cuál es tu nombre?\");\n          return;\n        }\n        setFormData({ ...formData, nombre: msg });\n        addResponseMessage('¿Cuál es tu apellido paterno?');\n        setStep(1);\n        break;\n      case 1:\n        if(!validacionApellido(msg)) {\n          addResponseMessage('Por favor, ingresa un apellido válido (inicia con mayúscula y máximo 13 letras).');\n          addResponseMessage('¿Cuál es tu apellido paterno?');\n          return;\n        }\n        setFormData({ ...formData, apellido: msg });\n        addResponseMessage('¿Cuál es tu correo electrónico?');\n        setStep(2);\n        break;\n      case 2:\n        if (!validacionCorreo(msg)) {\n          addResponseMessage('Por favor, ingresa un correo electrónico válido.');\n          addResponseMessage('¿Cuál es tu correo electrónico?');\n          return;\n        }\n        setFormData({ ...formData, correo: msg });\n        addResponseMessage('¿Cuál es tu número telefónico?');\n        setStep(3);\n        break;\n      case 3:\n        if (!validacionTelefono(msg)) {\n          addResponseMessage('Por favor, ingresa un número telefónico válido (10 dígitos).');\n          addResponseMessage('¿Cuál es tu número telefónico?');\n          return;\n        }\n        setFormData({ ...formData, telefono: msg });\n        addResponseMessage('¿Cuál es el nombre de la empresa?');\n        setStep(4);\n        break;\n      case 4:\n        if (!validacionEmpresa(msg)) {\n          addResponseMessage('Por favor, ingresa un nombre de empresa válido (inicia con mayúscula y máximo 20 letras).');\n          addResponseMessage('¿Cuál es el nombre de la empresa?');\n          return;\n        }\n        const nuevoFormData = { ...formData, empresa: msg };\n        setFormData(nuevoFormData);\n        addResponseMessage('¡Gracias por completar el formulario!');\n          console.log('Datos finales del formulario:', formData);\n      \n          // Mostrar resumen para edición\n          const resumen = `\n      1. Nombre: ${nuevoFormData.nombre}\n      2. Apellido: ${nuevoFormData.apellido}\n      3. Correo: ${nuevoFormData.correo}\n      4. Teléfono: ${nuevoFormData.telefono}\n      5. Empresa: ${nuevoFormData.empresa}\n          `;\n          addResponseMessage('¿Deseas editar algún dato antes de enviar? Escribe el número del campo que deseas editar o \"no\" para continuar.');\n          addResponseMessage(resumen);\n          setStep(111);\n        //addResponseMessage('Ahora comenzaras a agregar los servicios');\n        //addResponseMessage('Escribe el número de servicio:');\n        \n        //setStep(6);\n        break;\n      case 5:\n        if (!validacionEmpresa(msg)) {\n          addResponseMessage('Por favor, ingresa un nombre de empresa válido (inicia con mayúscula y máximo 20 letras).');\n          addResponseMessage('¿Cuál es el nombre de la empresa?');\n          return;\n        }\n        //setFormData({ ...formData, empresa: msg });\n         addResponseMessage('Ahora comenzaras a agregar los servicios');\n        addResponseMessage('Escribe el número de servicio:');\n    \n        break;\n\n      case 111:\n        //console.log('Campo a editar msg:', msg);\n        if (msg.toLowerCase() === 'no') {\n          //enviarDatos();\n          //addResponseMessage('Datos enviados correctamente. ¿Deseas crear otra cotización? (sí/no)');\n          addResponseMessage('Ahora comenzaras a agregar los servicios');\n          addResponseMessage('Escribe el número de servicio:');\n          setStep(7);\n        } else {\n          const opcion = parseInt(msg);\n          if (isNaN(opcion) || opcion < 1 || opcion > 5) {\n            addResponseMessage('Por favor, escribe un número válido entre 1 y 5, o \"no\" para continuar.');\n          } else {\n            console.log('Campo a editar:', opcion);\n            setCampoAEditar(opcion); // regresa al paso correspondiente\n            console.log('Campo a editar:', campoAEditar);\n            const preguntas = [\n              '¿Cuál es tu nombre?',\n              '¿Cuál es tu apellido paterno?',\n              '¿Cuál es tu correo electrónico?',\n              '¿Cuál es tu número telefónico?',\n              '¿Cuál es el nombre de la empresa?'\n            ];\n            addResponseMessage(`Vamos a corregir el campo ${opcion}:`);\n            addResponseMessage(preguntas[opcion ]);\n          }\n        }\n        setStep(6);\n        break;\n      \n      case 6:\n        addResponseMessage('Ahora comenzaras a agregar los servicios');\n        addResponseMessage('Escribe el número de servicio:');\n        setStep(7);\n        return;\n        //break;\n      case 7:\n              // Entrada de varios números de servicio\n        const numeros = msg.split(',').map(num => parseInt(num.trim())).filter(n => !isNaN(n));\n        if (numeros.length === 0) {\n          addResponseMessage('Por favor, ingresa al menos un número válido separado por comas.');\n          return;\n        }\n        setServicioTemporal({ ...servicioTemporal, numeros }); // guarda varios\n        addResponseMessage('¿Cuántos necesita de cada uno? Ingresa las cantidades separadas por comas en el mismo orden.');\n        setStep(8);\n        break;\n      case 8:\n        // Entrada de varias cantidades\n        const cantidades = msg.split(',').map(c => parseInt(c.trim())).filter(c => !isNaN(c));\n        if (cantidades.length !== servicioTemporal.numeros.length) {\n          addResponseMessage('El número de cantidades no coincide con el número de servicios. Intenta de nuevo.');\n          return;\n        }\n\n        const nuevosServicios = servicioTemporal.numeros.map((numero, index) => ({\n          numero,\n          cantidad: cantidades[index]\n        }));\n\n        setFormData(prev => ({\n          ...prev,\n          servicios: [...prev.servicios, ...nuevosServicios]\n        }));\n        setServicioTemporal({ numeros: [] });\n        addResponseMessage('¿Quieres agregar más servicios? (sí/no)');\n        setStep(9);\n        break;\n      case 9:\n        if (msg.toLowerCase() === 'sí' || msg.toLowerCase() === 'si') {\n          addResponseMessage('Escribe el número de servicio:');\n          setStep(6);\n        } else {\n          addResponseMessage('¡Gracias por completar el formulario!');\n          enviarDatos();\n          setStep(999);\n          console.log('Datos finales del formulario:', formData);\n          addResponseMessage('¿Deseas crear otra cotización? (sí/no)');\n          setStep(10);\n        }\n        break;\n      case 10:\n        if (msg.toLowerCase() === 'sí' || msg.toLowerCase() === 'si') {\n          setFormData({\n            nombre: '',\n            apellido: '',\n            correo: '',\n            telefono: '',\n            empresa: '',\n            fechaSolicitud: '',\n            fechaCaducidad: '',\n            servicios: [],\n          });\n          setServicioActual({});\n          addResponseMessage(\"Perfecto. ¿Cuál es tu nombre?\");\n          setStep(0);\n        } else {\n          addResponseMessage('¡Gracias por usar nuestro servicio!');\n          setStep(999);\n        }\n        break;\n      default:\n        addResponseMessage('Ya hemos terminado. ¡Gracias!');\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Mi App con Chat</h1>\n      <Widget\n        handleNewUserMessage={handleNewUserMessage}\n        title=\"Chat De Cotizacion\"\n        subtitle=\"Estamos para ayudarte\"\n      />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}