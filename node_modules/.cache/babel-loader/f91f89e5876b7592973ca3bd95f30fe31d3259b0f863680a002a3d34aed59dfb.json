{"ast":null,"code":"var _jsxFileName = \"/Users/appletech/Desktop/chatbottest/chatbottest/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport { createServicioPreCotizacion, createPreCotizacion, getServicioData } from './api/Api';\nimport { Widget, addResponseMessage } from 'react-chat-widget-react-18';\nimport 'react-chat-widget-react-18/lib/styles.css';\nimport './chatbot.css';\n\n// Constantes para los pasos del flujo\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst STEPS = {\n  INICIO: 0,\n  NOMBRE: 1,\n  APELLIDO: 2,\n  TELEFONO: 3,\n  CORREO: 4,\n  EMPRESA: 5,\n  CONFIRMACION_DATOS: 111,\n  SERVICIOS_INPUT: 7,\n  CANTIDADES_INPUT: 8,\n  MENU_SERVICIOS: 9,\n  EDICION_SERVICIO_SELECCION: 91,\n  EDICION_SERVICIO_OPCION: 92,\n  EDICION_SERVICIO_NUMERO: 93,\n  EDICION_SERVICIO_CANTIDAD: 94,\n  ELIMINACION_SERVICIO: 95,\n  CONFIRMACION_ENVIO: 10,\n  FINAL: 11,\n  TERMINADO: 999\n};\n\n// Expresiones regulares para validaciones\nconst VALIDACIONES = {\n  nombre: /^([A-Z][a-z]+)(\\s[A-Z][a-z]+)*$/,\n  apellido: /^[A-Z][a-zA-Z]{0,13}$/,\n  correo: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/,\n  telefono: /^[0-9]{10}$/,\n  empresa: /^[A-Z][a-zA-Z]{0,20}$/,\n  servicio: /^[0-9]{1,3}$/,\n  cantidad: /^[0-9]{1,3}$/\n};\nfunction App() {\n  _s();\n  // Estados\n  const [step, setStep] = useState(STEPS.INICIO);\n  const [formData, setFormData] = useState({\n    nombre: '',\n    apellido: '',\n    correo: '',\n    telefono: '',\n    empresa: '',\n    fechaSolicitud: '',\n    fechaCaducidad: '',\n    servicios: []\n  });\n  const [serviciosDisponibles, setServiciosDisponibles] = useState([]);\n  const [servicioTemporal, setServicioTemporal] = useState({\n    numeros: []\n  });\n  const [servicioAEditar, setServicioAEditar] = useState(null);\n  const [campoAEditar, setCampoAEditar] = useState(null);\n  const [pasoExtra, setPasoExtra] = useState(null);\n  const hasGreeted = useRef(false);\n\n  // Efecto para el saludo inicial\n  useEffect(() => {\n    if (!hasGreeted.current) {\n      addResponseMessage('¬°Hola! Soy un chatbot. ¬øQuieres crear una cotizaci√≥n?');\n      addResponseMessage('Para crear una cotizaci√≥n necesito algunos datos.');\n      addResponseMessage(\"¬øCu√°l es tu nombre?\");\n      hasGreeted.current = true;\n    }\n  }, []);\n\n  // Obtener servicios disponibles\n  useEffect(() => {\n    const fetchServicios = async () => {\n      try {\n        const response = await getServicioData(7);\n        setServiciosDisponibles(response.data);\n      } catch (error) {\n        console.error(\"Error al obtener servicios:\", error);\n      }\n    };\n    fetchServicios();\n  }, []);\n\n  // Funciones de validaci√≥n\n  const validarCampo = (campo, valor) => {\n    var _VALIDACIONES$campo;\n    return (_VALIDACIONES$campo = VALIDACIONES[campo]) === null || _VALIDACIONES$campo === void 0 ? void 0 : _VALIDACIONES$campo.test(valor);\n  };\n\n  // Funciones auxiliares\n  const generarResumenServicios = servicios => {\n    return servicios.map((s, i) => {\n      const info = serviciosDisponibles.find(serv => serv.numero === s.numero);\n      const nombre = info ? info.nombreServicio : `Servicio #${s.numero}`;\n      return `${i + 1}. ${nombre}, Cantidad: ${s.cantidad}`;\n    }).join('\\n');\n  };\n  const mostrarResumenServicios = () => {\n    if (!formData.servicios || formData.servicios.length === 0) {\n      addResponseMessage('No hay servicios agregados.');\n      return;\n    }\n    const resumenServicios = generarResumenServicios(formData.servicios);\n    addResponseMessage('Resumen de servicios:');\n    addResponseMessage(resumenServicios);\n    addResponseMessage('Procesando...');\n    setTimeout(() => {\n      addResponseMessage('¬øQu√© deseas hacer ahora?\\n1. Agregar m√°s servicios\\n2. Editar un servicio\\n3. Eliminar un servicio\\n4. Continuar con la cotizaci√≥n');\n    }, 3000);\n  };\n  const mostrarMenuServicios = () => {\n    addResponseMessage('¬øQu√© deseas hacer ahora?\\n1. Agregar m√°s servicios\\n2. Editar un servicio\\n3. Eliminar un servicio\\n4. Continuar con la cotizaci√≥n');\n    setStep(STEPS.MENU_SERVICIOS);\n  };\n\n  // Funciones para el flujo del chat\n  const manejarEdicionCampo = msg => {\n    let valid = false;\n    let nuevoFormData = {\n      ...formData\n    };\n    switch (campoAEditar) {\n      case 1:\n        valid = validarCampo('nombre', msg);\n        if (valid) nuevoFormData.nombre = msg;\n        break;\n      case 2:\n        valid = validarCampo('apellido', msg);\n        if (valid) nuevoFormData.apellido = msg;\n        break;\n      case 3:\n        valid = validarCampo('correo', msg);\n        if (valid) nuevoFormData.correo = msg;\n        break;\n      case 4:\n        valid = validarCampo('telefono', msg);\n        if (valid) nuevoFormData.telefono = msg;\n        break;\n      case 5:\n        valid = validarCampo('empresa', msg);\n        if (valid) nuevoFormData.empresa = msg;\n        break;\n      default:\n        return;\n    }\n    if (!valid) {\n      addResponseMessage('Dato inv√°lido. Intenta de nuevo:');\n      return;\n    }\n    setFormData(nuevoFormData);\n    setCampoAEditar(null);\n    const resumen = `\n      1. Nombre: ${nuevoFormData.nombre}\n      2. Apellido: ${nuevoFormData.apellido}\n      3. Correo: ${nuevoFormData.correo}\n      4. Tel√©fono: ${nuevoFormData.telefono}\n      5. Empresa: ${nuevoFormData.empresa}\n    `;\n    addResponseMessage('¬°Dato actualizado!');\n    addResponseMessage('Resumen actualizado:');\n    addResponseMessage(resumen);\n    addResponseMessage('¬øDeseas editar otro dato? Escribe el n√∫mero o \"no\" para continuar.');\n  };\n  const manejarInputServicios = msg => {\n    const partes = msg.split(',').map(p => p.trim());\n    const numeros = [];\n    let hayInvalido = false;\n    for (let parte of partes) {\n      const numero = parseInt(parte, 10);\n      if (!/^\\d+$/.test(parte) || isNaN(numero)) {\n        hayInvalido = true;\n        break;\n      }\n      numeros.push(numero);\n    }\n    if (hayInvalido) {\n      addResponseMessage('‚ùå Solo se permiten n√∫meros enteros separados por coma. Intenta de nuevo.');\n      return;\n    }\n    setServicioTemporal({\n      ...servicioTemporal,\n      numeros\n    });\n    addResponseMessage('¬øCu√°nto necesita de cada uno? Ingresa las cantidades separadas por comas en el mismo orden.');\n    setStep(STEPS.CANTIDADES_INPUT);\n  };\n  const manejarInputCantidades = msg => {\n    const partesCantidades = msg.split(',').map(c => c.trim());\n    const cantidades = [];\n    let hayCantidadInvalida = false;\n    for (let parte of partesCantidades) {\n      const cantidad = parseInt(parte, 10);\n      if (!/^\\d+$/.test(parte) || isNaN(cantidad)) {\n        hayCantidadInvalida = true;\n        break;\n      }\n      cantidades.push(cantidad);\n    }\n    if (hayCantidadInvalida) {\n      addResponseMessage('‚ùå Las cantidades deben ser n√∫meros enteros positivos separados por comas. Intenta de nuevo.');\n      return;\n    }\n    if (cantidades.length !== servicioTemporal.numeros.length) {\n      addResponseMessage('‚ùå El n√∫mero de cantidades no coincide con el n√∫mero de servicios seleccionados. Intenta de nuevo.');\n      return;\n    }\n    const nuevosServicios = servicioTemporal.numeros.map((numero, index) => ({\n      numero,\n      cantidad: cantidades[index]\n    }));\n    setFormData(prev => ({\n      ...prev,\n      servicios: [...prev.servicios, ...nuevosServicios]\n    }));\n    setServicioTemporal({\n      numeros: []\n    });\n    const serviciosTotales = [...formData.servicios, ...nuevosServicios];\n    const resumenServicios = generarResumenServicios(serviciosTotales);\n    addResponseMessage('‚úÖ Servicios agregados:');\n    addResponseMessage(resumenServicios);\n    addResponseMessage('Procesando...');\n    setTimeout(() => {\n      mostrarMenuServicios();\n    }, 3000);\n  };\n  const manejarEdicionServicio = msg => {\n    const opcion = msg.toLowerCase();\n    if (opcion === 'n√∫mero' || opcion === 'numero') {\n      addResponseMessage('Escribe el nuevo n√∫mero del servicio:');\n      setStep(STEPS.EDICION_SERVICIO_NUMERO);\n    } else if (opcion === 'cantidad') {\n      addResponseMessage('Escribe la nueva cantidad del servicio:');\n      setStep(STEPS.EDICION_SERVICIO_CANTIDAD);\n    } else if (opcion === 'ambos') {\n      setPasoExtra('cantidad');\n      addResponseMessage('Escribe el nuevo n√∫mero del servicio:');\n      setStep(STEPS.EDICION_SERVICIO_NUMERO);\n    } else {\n      addResponseMessage('Opci√≥n no v√°lida. Escribe: n√∫mero, cantidad o ambos.');\n    }\n  };\n  const manejarEliminacionServicio = msg => {\n    const indiceEliminar = parseInt(msg) - 1;\n    if (!isNaN(indiceEliminar) && formData.servicios[indiceEliminar]) {\n      const servicioEliminado = formData.servicios[indiceEliminar];\n      const serviciosActualizados = [...formData.servicios];\n      serviciosActualizados.splice(indiceEliminar, 1);\n      setFormData(prev => ({\n        ...prev,\n        servicios: serviciosActualizados\n      }));\n      addResponseMessage(`üóëÔ∏è Servicio #${servicioEliminado.numero} eliminado.`);\n      const resumenActualizado = generarResumenServicios(serviciosActualizados);\n      addResponseMessage('Servicios restantes:');\n      addResponseMessage(resumenActualizado);\n      addResponseMessage('Procesando...');\n      setTimeout(() => {\n        mostrarMenuServicios();\n      }, 3000);\n    } else {\n      addResponseMessage('N√∫mero inv√°lido. Intenta nuevamente.');\n    }\n  };\n  const enviarDatos = async () => {\n    try {\n      const today = new Date();\n      const fechaSolicitud = today.toISOString().split('T')[0];\n      const futureDate = new Date();\n      futureDate.setDate(today.getDate() + 30);\n      const fechaCaducidad = futureDate.toISOString().split('T')[0];\n\n      // Crear la pre-cotizaci√≥n principal\n      const preCotizacion = await createPreCotizacion({\n        nombreCliente: formData.nombre,\n        apellidoCliente: formData.apellido,\n        correo: formData.correo,\n        denominacion: \"MXN\",\n        nombreEmpresa: formData.empresa,\n        fechaSolicitud: fechaSolicitud,\n        fechaCaducidad: fechaCaducidad,\n        descuento: 0,\n        iva: 1,\n        organizacion: 7,\n        tipoMoneda: 1,\n        estado: 8\n      });\n      const idPreCotizacion = preCotizacion.data.id;\n\n      // Crear los servicios asociados\n      for (const servicio of formData.servicios) {\n        const servicioEncontrado = serviciosDisponibles.find(s => s.numero === Number(servicio.numero));\n        await createServicioPreCotizacion({\n          descripcion: \"Sin descripci√≥n\",\n          precio: \"0\",\n          cantidad: Number(servicio.cantidad) || 0,\n          preCotizacion: idPreCotizacion,\n          servicio: servicioEncontrado.id\n        });\n      }\n      addResponseMessage(\"‚úÖ ¬°Cotizaci√≥n enviada exitosamente!\");\n    } catch (error) {\n      console.error(\"Error al enviar datos:\", error);\n      addResponseMessage(\"‚ùå Hubo un error al enviar la cotizaci√≥n. Int√©ntalo de nuevo.\");\n    }\n  };\n  const handleNewUserMessage = msg => {\n    const input = msg.trim().toLowerCase();\n\n    // Manejar comandos globales\n    if (input === 'cancelar' && [STEPS.MENU_SERVICIOS, STEPS.EDICION_SERVICIO_SELECCION, STEPS.EDICION_SERVICIO_OPCION, STEPS.EDICION_SERVICIO_NUMERO, STEPS.EDICION_SERVICIO_CANTIDAD, STEPS.ELIMINACION_SERVICIO].includes(step)) {\n      addResponseMessage('üö´ Proceso cancelado. ¬øQuieres volver a empezar? Escribe \"inicio\".');\n      setStep(STEPS.INICIO);\n      return;\n    }\n    if (input === 'regresar' && [STEPS.EDICION_SERVICIO_SELECCION, STEPS.EDICION_SERVICIO_OPCION, STEPS.EDICION_SERVICIO_NUMERO, STEPS.EDICION_SERVICIO_CANTIDAD, STEPS.ELIMINACION_SERVICIO].includes(step)) {\n      addResponseMessage('üîô Volviendo al men√∫ anterior...');\n      mostrarMenuServicios();\n      return;\n    }\n\n    // Si estamos editando un campo del formulario\n    if (campoAEditar !== null) {\n      manejarEdicionCampo(msg);\n      return;\n    }\n\n    // Flujo principal del chat\n    switch (step) {\n      case STEPS.INICIO:\n        if (!validarCampo('nombre', msg)) {\n          addResponseMessage('Por favor, ingresa un nombre v√°lido (inicia con may√∫scula y m√°ximo 12 letras).');\n          addResponseMessage(\"¬øCu√°l es tu nombre?\");\n          return;\n        }\n        setFormData({\n          ...formData,\n          nombre: msg\n        });\n        addResponseMessage('¬øCu√°l es tu apellido paterno?');\n        setStep(STEPS.APELLIDO);\n        break;\n      case STEPS.APELLIDO:\n        if (!validarCampo('apellido', msg)) {\n          addResponseMessage('Por favor, ingresa un apellido v√°lido (inicia con may√∫scula y m√°ximo 13 letras).');\n          addResponseMessage('¬øCu√°l es tu apellido paterno?');\n          return;\n        }\n        setFormData({\n          ...formData,\n          apellido: msg\n        });\n        addResponseMessage('¬øCu√°l es tu n√∫mero telef√≥nico?');\n        setStep(STEPS.TELEFONO);\n        break;\n      case STEPS.TELEFONO:\n        if (!validarCampo('telefono', msg)) {\n          addResponseMessage('Por favor, ingresa un n√∫mero telef√≥nico v√°lido (10 d√≠gitos).');\n          addResponseMessage('¬øCu√°l es tu n√∫mero telef√≥nico?');\n          return;\n        }\n        setFormData({\n          ...formData,\n          telefono: msg\n        });\n        addResponseMessage('¬øCu√°l es tu correo electr√≥nico?');\n        setStep(STEPS.CORREO);\n        break;\n      case STEPS.CORREO:\n        if (!validarCampo('correo', msg)) {\n          addResponseMessage('Por favor, ingresa un correo electr√≥nico v√°lido.');\n          addResponseMessage('¬øCu√°l es tu correo electr√≥nico?');\n          return;\n        }\n        setFormData({\n          ...formData,\n          correo: msg\n        });\n        addResponseMessage('¬øCu√°l es el nombre de la empresa?');\n        setStep(STEPS.EMPRESA);\n        break;\n      case STEPS.EMPRESA:\n        if (!validarCampo('empresa', msg)) {\n          addResponseMessage('Por favor, ingresa un nombre de empresa v√°lido (inicia con may√∫scula y m√°ximo 20 letras).');\n          addResponseMessage('¬øCu√°l es el nombre de la empresa?');\n          return;\n        }\n        const nuevoFormData = {\n          ...formData,\n          empresa: msg\n        };\n        setFormData(nuevoFormData);\n        addResponseMessage('¬°Gracias por completar el formulario!');\n        const resumen = `\n          1. Nombre: ${nuevoFormData.nombre}\n          2. Apellido: ${nuevoFormData.apellido}\n          3. Correo: ${nuevoFormData.correo}\n          4. Tel√©fono: ${nuevoFormData.telefono}\n          5. Empresa: ${nuevoFormData.empresa}\n        `;\n        addResponseMessage('¬øDeseas editar alg√∫n dato antes de enviar? Escribe el n√∫mero del campo que deseas editar o \"no\" para continuar.');\n        addResponseMessage(resumen);\n        setStep(STEPS.CONFIRMACION_DATOS);\n        break;\n      case STEPS.CONFIRMACION_DATOS:\n        if (input === 'no') {\n          addResponseMessage('Ahora se comenzara a agregar los servicios de la cotizacion');\n          addResponseMessage('Escribe los numeros de servicio separados por comas (Ejemplo: 1,2,3):');\n          setStep(STEPS.SERVICIOS_INPUT);\n        } else {\n          const opcion = parseInt(msg);\n          if (isNaN(opcion) || opcion < 1 || opcion > 5) {\n            addResponseMessage('Por favor, escribe un n√∫mero v√°lido entre 1 y 5, o \"no\" para continuar.');\n          } else {\n            setCampoAEditar(opcion);\n            const preguntas = ['¬øCu√°l es tu nombre?', '¬øCu√°l es tu apellido paterno?', '¬øCu√°l es tu correo electr√≥nico?', '¬øCu√°l es tu n√∫mero telef√≥nico?', '¬øCu√°l es el nombre de la empresa?'];\n            addResponseMessage(`Vamos a corregir el campo ${opcion}:`);\n            addResponseMessage(preguntas[opcion - 1]);\n          }\n        }\n        break;\n      case STEPS.SERVICIOS_INPUT:\n        manejarInputServicios(msg);\n        break;\n      case STEPS.CANTIDADES_INPUT:\n        manejarInputCantidades(msg);\n        break;\n      case STEPS.MENU_SERVICIOS:\n        switch (input) {\n          case '1':\n            addResponseMessage('Dime qu√© n√∫mero(s) de servicio quieres agregar.');\n            setStep(STEPS.SERVICIOS_INPUT);\n            break;\n          case '2':\n            {\n              const resumen = generarResumenServicios(formData.servicios);\n              addResponseMessage('Servicios actuales:');\n              addResponseMessage(resumen);\n              addResponseMessage('Escribe el n√∫mero del servicio que deseas editar:');\n              setStep(STEPS.EDICION_SERVICIO_SELECCION);\n            }\n            break;\n          case '3':\n            {\n              const resumenDel = generarResumenServicios(formData.servicios);\n              addResponseMessage('Servicios actuales:');\n              addResponseMessage(resumenDel);\n              addResponseMessage('Escribe el n√∫mero del servicio que deseas eliminar:');\n              setStep(STEPS.ELIMINACION_SERVICIO);\n            }\n            break;\n          case '4':\n            {\n              const resumenFinal = generarResumenServicios(formData.servicios);\n              addResponseMessage('Resumen final de servicios:');\n              addResponseMessage(resumenFinal);\n              addResponseMessage('¬øConfirmas que deseas enviar la cotizaci√≥n? (s√≠/no)');\n              setStep(STEPS.CONFIRMACION_ENVIO);\n            }\n            break;\n          default:\n            addResponseMessage('Por favor ingresa una opci√≥n v√°lida (1, 2, 3 o 4).');\n            break;\n        }\n        break;\n      case STEPS.EDICION_SERVICIO_SELECCION:\n        if (input === 'no') {\n          mostrarMenuServicios();\n          return;\n        }\n        const indice = parseInt(msg) - 1;\n        if (!isNaN(indice) && formData.servicios[indice]) {\n          setServicioAEditar(indice);\n          addResponseMessage(`¬øQu√© deseas editar del servicio #${formData.servicios[indice].numero}? (escribe: n√∫mero o cantidad)`);\n          setStep(STEPS.EDICION_SERVICIO_OPCION);\n        } else {\n          addResponseMessage('Entrada no v√°lida. Escribe el n√∫mero del servicio a editar o \"no\" para continuar.');\n        }\n        break;\n      case STEPS.EDICION_SERVICIO_OPCION:\n        manejarEdicionServicio(msg);\n        break;\n      case STEPS.EDICION_SERVICIO_NUMERO:\n        const nuevoNumero = parseInt(msg);\n        if (isNaN(nuevoNumero) || nuevoNumero <= 0) {\n          addResponseMessage('N√∫mero inv√°lido. Ingresa un n√∫mero mayor a 0.');\n          return;\n        }\n        if (servicioAEditar === null || isNaN(servicioAEditar) || servicioAEditar < 0 || servicioAEditar >= formData.servicios.length) {\n          addResponseMessage('Error interno: no se pudo identificar el servicio a editar.');\n          setStep(STEPS.EDICION_SERVICIO_SELECCION);\n          return;\n        }\n        const serviciosEditados = [...formData.servicios];\n        serviciosEditados[servicioAEditar] = {\n          ...serviciosEditados[servicioAEditar],\n          numero: nuevoNumero\n        };\n        setFormData({\n          ...formData,\n          servicios: serviciosEditados\n        });\n        if (pasoExtra === 'cantidad') {\n          setPasoExtra(null);\n          setStep(STEPS.EDICION_SERVICIO_CANTIDAD);\n          addResponseMessage('Escribe la nueva cantidad del servicio:');\n        } else {\n          setServicioAEditar(null);\n          addResponseMessage('¬°Servicio actualizado!');\n          mostrarResumenServicios();\n          setStep(STEPS.MENU_SERVICIOS);\n        }\n        break;\n      case STEPS.EDICION_SERVICIO_CANTIDAD:\n        const nuevaCantidad = parseInt(msg);\n        if (isNaN(nuevaCantidad) || nuevaCantidad <= 0) {\n          addResponseMessage('Cantidad inv√°lida. Ingresa un n√∫mero mayor a 0.');\n          return;\n        }\n        const serviciosActualizados = [...formData.servicios];\n        serviciosActualizados[servicioAEditar].cantidad = nuevaCantidad;\n        setFormData({\n          ...formData,\n          servicios: serviciosActualizados\n        });\n        setServicioAEditar(null);\n        addResponseMessage('¬°Cantidad actualizada!');\n        mostrarResumenServicios();\n        setStep(STEPS.MENU_SERVICIOS);\n        break;\n      case STEPS.ELIMINACION_SERVICIO:\n        manejarEliminacionServicio(msg);\n        break;\n      case STEPS.CONFIRMACION_ENVIO:\n        if (input === 'si' || input === 's√≠') {\n          enviarDatos();\n          addResponseMessage('¬°Cotizaci√≥n enviada!');\n          addResponseMessage('¬øDeseas crear otra cotizaci√≥n? (s√≠/no)');\n          setStep(STEPS.FINAL);\n        } else if (input === 'no') {\n          addResponseMessage('¬°Gracias por usar nuestro servicio!');\n          addResponseMessage('¬øDeseas crear otra cotizaci√≥n? (s√≠/no)');\n          setStep(STEPS.FINAL);\n        }\n        break;\n      case STEPS.FINAL:\n        if (input === 's√≠' || input === 'si') {\n          setFormData({\n            nombre: '',\n            apellido: '',\n            correo: '',\n            telefono: '',\n            empresa: '',\n            fechaSolicitud: '',\n            fechaCaducidad: '',\n            servicios: []\n          });\n          addResponseMessage(\"Perfecto. ¬øCu√°l es tu nombre?\");\n          setStep(STEPS.INICIO);\n        } else {\n          addResponseMessage('¬°Gracias por usar nuestro servicio!');\n          setStep(STEPS.TERMINADO);\n        }\n        break;\n      default:\n        addResponseMessage('Ya hemos terminado. ¬°Gracias!');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Chatbot de Cotizaci\\xF3n\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 608,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Widget, {\n      handleNewUserMessage: handleNewUserMessage,\n      title: \"Chat de Cotizaci\\xF3n\",\n      subtitle: \"Estamos para ayudarte\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 609,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 607,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"GTvtNnn/JeieBinnyoNuPW0YZDk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","useRef","createServicioPreCotizacion","createPreCotizacion","getServicioData","Widget","addResponseMessage","jsxDEV","_jsxDEV","STEPS","INICIO","NOMBRE","APELLIDO","TELEFONO","CORREO","EMPRESA","CONFIRMACION_DATOS","SERVICIOS_INPUT","CANTIDADES_INPUT","MENU_SERVICIOS","EDICION_SERVICIO_SELECCION","EDICION_SERVICIO_OPCION","EDICION_SERVICIO_NUMERO","EDICION_SERVICIO_CANTIDAD","ELIMINACION_SERVICIO","CONFIRMACION_ENVIO","FINAL","TERMINADO","VALIDACIONES","nombre","apellido","correo","telefono","empresa","servicio","cantidad","App","_s","step","setStep","formData","setFormData","fechaSolicitud","fechaCaducidad","servicios","serviciosDisponibles","setServiciosDisponibles","servicioTemporal","setServicioTemporal","numeros","servicioAEditar","setServicioAEditar","campoAEditar","setCampoAEditar","pasoExtra","setPasoExtra","hasGreeted","current","fetchServicios","response","data","error","console","validarCampo","campo","valor","_VALIDACIONES$campo","test","generarResumenServicios","map","s","i","info","find","serv","numero","nombreServicio","join","mostrarResumenServicios","length","resumenServicios","setTimeout","mostrarMenuServicios","manejarEdicionCampo","msg","valid","nuevoFormData","resumen","manejarInputServicios","partes","split","p","trim","hayInvalido","parte","parseInt","isNaN","push","manejarInputCantidades","partesCantidades","c","cantidades","hayCantidadInvalida","nuevosServicios","index","prev","serviciosTotales","manejarEdicionServicio","opcion","toLowerCase","manejarEliminacionServicio","indiceEliminar","servicioEliminado","serviciosActualizados","splice","resumenActualizado","enviarDatos","today","Date","toISOString","futureDate","setDate","getDate","preCotizacion","nombreCliente","apellidoCliente","denominacion","nombreEmpresa","descuento","iva","organizacion","tipoMoneda","estado","idPreCotizacion","id","servicioEncontrado","Number","descripcion","precio","handleNewUserMessage","input","includes","preguntas","resumenDel","resumenFinal","indice","nuevoNumero","serviciosEditados","nuevaCantidad","className","children","fileName","_jsxFileName","lineNumber","columnNumber","title","subtitle","_c","$RefreshReg$"],"sources":["/Users/appletech/Desktop/chatbottest/chatbottest/src/App.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport { createServicioPreCotizacion, createPreCotizacion, getServicioData } from './api/Api';\nimport { Widget, addResponseMessage } from 'react-chat-widget-react-18';\nimport 'react-chat-widget-react-18/lib/styles.css';\nimport './chatbot.css';\n\n// Constantes para los pasos del flujo\nconst STEPS = {\n  INICIO: 0,\n  NOMBRE: 1,\n  APELLIDO: 2,\n  TELEFONO: 3,\n  CORREO: 4,\n  EMPRESA: 5,\n  CONFIRMACION_DATOS: 111,\n  SERVICIOS_INPUT: 7,\n  CANTIDADES_INPUT: 8,\n  MENU_SERVICIOS: 9,\n  EDICION_SERVICIO_SELECCION: 91,\n  EDICION_SERVICIO_OPCION: 92,\n  EDICION_SERVICIO_NUMERO: 93,\n  EDICION_SERVICIO_CANTIDAD: 94,\n  ELIMINACION_SERVICIO: 95,\n  CONFIRMACION_ENVIO: 10,\n  FINAL: 11,\n  TERMINADO: 999\n};\n\n// Expresiones regulares para validaciones\nconst VALIDACIONES = {\n  nombre: /^([A-Z][a-z]+)(\\s[A-Z][a-z]+)*$/,\n  apellido: /^[A-Z][a-zA-Z]{0,13}$/,\n  correo: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/,\n  telefono: /^[0-9]{10}$/,\n  empresa: /^[A-Z][a-zA-Z]{0,20}$/,\n  servicio: /^[0-9]{1,3}$/,\n  cantidad: /^[0-9]{1,3}$/\n};\n\nfunction App() {\n  // Estados\n  const [step, setStep] = useState(STEPS.INICIO);\n  const [formData, setFormData] = useState({\n    nombre: '',\n    apellido: '',\n    correo: '',\n    telefono: '',\n    empresa: '',\n    fechaSolicitud: '',\n    fechaCaducidad: '',\n    servicios: [],\n  });\n  const [serviciosDisponibles, setServiciosDisponibles] = useState([]);\n  const [servicioTemporal, setServicioTemporal] = useState({ numeros: [] });\n  const [servicioAEditar, setServicioAEditar] = useState(null);\n  const [campoAEditar, setCampoAEditar] = useState(null);\n  const [pasoExtra, setPasoExtra] = useState(null);\n  \n  const hasGreeted = useRef(false);\n\n  // Efecto para el saludo inicial\n  useEffect(() => {\n    if (!hasGreeted.current) {\n      addResponseMessage('¬°Hola! Soy un chatbot. ¬øQuieres crear una cotizaci√≥n?');\n      addResponseMessage('Para crear una cotizaci√≥n necesito algunos datos.');\n      addResponseMessage(\"¬øCu√°l es tu nombre?\");\n      hasGreeted.current = true;\n    }\n  }, []);\n\n  // Obtener servicios disponibles\n  useEffect(() => {\n    const fetchServicios = async () => {\n      try {\n        const response = await getServicioData(7);\n        setServiciosDisponibles(response.data);\n      } catch (error) {\n        console.error(\"Error al obtener servicios:\", error);\n      }\n    };\n\n    fetchServicios();\n  }, []);\n\n  // Funciones de validaci√≥n\n  const validarCampo = (campo, valor) => {\n    return VALIDACIONES[campo]?.test(valor);\n  };\n\n  // Funciones auxiliares\n  const generarResumenServicios = (servicios) => {\n    return servicios.map((s, i) => {\n      const info = serviciosDisponibles.find(serv => serv.numero === s.numero);\n      const nombre = info ? info.nombreServicio : `Servicio #${s.numero}`;\n      return `${i + 1}. ${nombre}, Cantidad: ${s.cantidad}`;\n    }).join('\\n');\n  };\n\n  const mostrarResumenServicios = () => {\n    if (!formData.servicios || formData.servicios.length === 0) {\n      addResponseMessage('No hay servicios agregados.');\n      return;\n    }\n    \n    const resumenServicios = generarResumenServicios(formData.servicios);\n    addResponseMessage('Resumen de servicios:');\n    addResponseMessage(resumenServicios);\n    addResponseMessage('Procesando...');\n    \n    setTimeout(() => {\n      addResponseMessage('¬øQu√© deseas hacer ahora?\\n1. Agregar m√°s servicios\\n2. Editar un servicio\\n3. Eliminar un servicio\\n4. Continuar con la cotizaci√≥n');\n    }, 3000);\n  };\n\n  const mostrarMenuServicios = () => {\n    addResponseMessage('¬øQu√© deseas hacer ahora?\\n1. Agregar m√°s servicios\\n2. Editar un servicio\\n3. Eliminar un servicio\\n4. Continuar con la cotizaci√≥n');\n    setStep(STEPS.MENU_SERVICIOS);\n  };\n\n  // Funciones para el flujo del chat\n  const manejarEdicionCampo = (msg) => {\n    let valid = false;\n    let nuevoFormData = { ...formData };\n\n    switch (campoAEditar) {\n      case 1: valid = validarCampo('nombre', msg); if (valid) nuevoFormData.nombre = msg; break;\n      case 2: valid = validarCampo('apellido', msg); if (valid) nuevoFormData.apellido = msg; break;\n      case 3: valid = validarCampo('correo', msg); if (valid) nuevoFormData.correo = msg; break;\n      case 4: valid = validarCampo('telefono', msg); if (valid) nuevoFormData.telefono = msg; break;\n      case 5: valid = validarCampo('empresa', msg); if (valid) nuevoFormData.empresa = msg; break;\n      default: return;\n    }\n\n    if (!valid) {\n      addResponseMessage('Dato inv√°lido. Intenta de nuevo:');\n      return;\n    }\n\n    setFormData(nuevoFormData);\n    setCampoAEditar(null);\n\n    const resumen = `\n      1. Nombre: ${nuevoFormData.nombre}\n      2. Apellido: ${nuevoFormData.apellido}\n      3. Correo: ${nuevoFormData.correo}\n      4. Tel√©fono: ${nuevoFormData.telefono}\n      5. Empresa: ${nuevoFormData.empresa}\n    `;\n    \n    addResponseMessage('¬°Dato actualizado!');\n    addResponseMessage('Resumen actualizado:');\n    addResponseMessage(resumen);\n    addResponseMessage('¬øDeseas editar otro dato? Escribe el n√∫mero o \"no\" para continuar.');\n  };\n\n  const manejarInputServicios = (msg) => {\n    const partes = msg.split(',').map(p => p.trim());\n    const numeros = [];\n    let hayInvalido = false;\n\n    for (let parte of partes) {\n      const numero = parseInt(parte, 10);\n      if (!/^\\d+$/.test(parte) || isNaN(numero)) {\n        hayInvalido = true;\n        break;\n      }\n      numeros.push(numero);\n    }\n\n    if (hayInvalido) {\n      addResponseMessage('‚ùå Solo se permiten n√∫meros enteros separados por coma. Intenta de nuevo.');\n      return;\n    }\n\n    setServicioTemporal({ ...servicioTemporal, numeros });\n    addResponseMessage('¬øCu√°nto necesita de cada uno? Ingresa las cantidades separadas por comas en el mismo orden.');\n    setStep(STEPS.CANTIDADES_INPUT);\n  };\n\n  const manejarInputCantidades = (msg) => {\n    const partesCantidades = msg.split(',').map(c => c.trim());\n    const cantidades = [];\n    let hayCantidadInvalida = false;\n\n    for (let parte of partesCantidades) {\n      const cantidad = parseInt(parte, 10);\n      if (!/^\\d+$/.test(parte) || isNaN(cantidad)) {\n        hayCantidadInvalida = true;\n        break;\n      }\n      cantidades.push(cantidad);\n    }\n\n    if (hayCantidadInvalida) {\n      addResponseMessage('‚ùå Las cantidades deben ser n√∫meros enteros positivos separados por comas. Intenta de nuevo.');\n      return;\n    }\n\n    if (cantidades.length !== servicioTemporal.numeros.length) {\n      addResponseMessage('‚ùå El n√∫mero de cantidades no coincide con el n√∫mero de servicios seleccionados. Intenta de nuevo.');\n      return;\n    }\n\n    const nuevosServicios = servicioTemporal.numeros.map((numero, index) => ({\n      numero,\n      cantidad: cantidades[index]\n    }));\n\n    setFormData(prev => ({\n      ...prev,\n      servicios: [...prev.servicios, ...nuevosServicios]\n    }));\n    \n    setServicioTemporal({ numeros: [] });\n    const serviciosTotales = [...formData.servicios, ...nuevosServicios];\n    const resumenServicios = generarResumenServicios(serviciosTotales);\n\n    addResponseMessage('‚úÖ Servicios agregados:');\n    addResponseMessage(resumenServicios);\n    addResponseMessage('Procesando...');\n    \n    setTimeout(() => {\n      mostrarMenuServicios();\n    }, 3000);\n  };\n\n  const manejarEdicionServicio = (msg) => {\n    const opcion = msg.toLowerCase();\n    \n    if (opcion === 'n√∫mero' || opcion === 'numero') {\n      addResponseMessage('Escribe el nuevo n√∫mero del servicio:');\n      setStep(STEPS.EDICION_SERVICIO_NUMERO);\n    } else if (opcion === 'cantidad') {\n      addResponseMessage('Escribe la nueva cantidad del servicio:');\n      setStep(STEPS.EDICION_SERVICIO_CANTIDAD);\n    } else if (opcion === 'ambos') {\n      setPasoExtra('cantidad');\n      addResponseMessage('Escribe el nuevo n√∫mero del servicio:');\n      setStep(STEPS.EDICION_SERVICIO_NUMERO);\n    } else {\n      addResponseMessage('Opci√≥n no v√°lida. Escribe: n√∫mero, cantidad o ambos.');\n    }\n  };\n\n  const manejarEliminacionServicio = (msg) => {\n    const indiceEliminar = parseInt(msg) - 1;\n    \n    if (!isNaN(indiceEliminar) && formData.servicios[indiceEliminar]) {\n      const servicioEliminado = formData.servicios[indiceEliminar];\n      const serviciosActualizados = [...formData.servicios];\n      serviciosActualizados.splice(indiceEliminar, 1);\n\n      setFormData(prev => ({\n        ...prev,\n        servicios: serviciosActualizados\n      }));\n\n      addResponseMessage(`üóëÔ∏è Servicio #${servicioEliminado.numero} eliminado.`);\n      const resumenActualizado = generarResumenServicios(serviciosActualizados);\n      \n      addResponseMessage('Servicios restantes:');\n      addResponseMessage(resumenActualizado);\n      addResponseMessage('Procesando...');\n      \n      setTimeout(() => {\n        mostrarMenuServicios();\n      }, 3000);\n    } else {\n      addResponseMessage('N√∫mero inv√°lido. Intenta nuevamente.');\n    }\n  };\n\n  const enviarDatos = async () => {\n    try {\n      const today = new Date();\n      const fechaSolicitud = today.toISOString().split('T')[0];\n      const futureDate = new Date();\n      futureDate.setDate(today.getDate() + 30);\n      const fechaCaducidad = futureDate.toISOString().split('T')[0];\n\n      // Crear la pre-cotizaci√≥n principal\n      const preCotizacion = await createPreCotizacion({\n        nombreCliente: formData.nombre,\n        apellidoCliente: formData.apellido,\n        correo: formData.correo,\n        denominacion: \"MXN\",\n        nombreEmpresa: formData.empresa,\n        fechaSolicitud: fechaSolicitud,\n        fechaCaducidad: fechaCaducidad,\n        descuento: 0,\n        iva: 1,\n        organizacion: 7,\n        tipoMoneda: 1,\n        estado: 8,\n      });\n\n      const idPreCotizacion = preCotizacion.data.id;\n\n      // Crear los servicios asociados\n      for (const servicio of formData.servicios) {\n        const servicioEncontrado = serviciosDisponibles.find(s => s.numero === Number(servicio.numero));\n        \n        await createServicioPreCotizacion({\n          descripcion: \"Sin descripci√≥n\",\n          precio: \"0\",\n          cantidad: Number(servicio.cantidad) || 0,\n          preCotizacion: idPreCotizacion,\n          servicio: servicioEncontrado.id,\n        });\n      }\n\n      addResponseMessage(\"‚úÖ ¬°Cotizaci√≥n enviada exitosamente!\");\n    } catch (error) {\n      console.error(\"Error al enviar datos:\", error);\n      addResponseMessage(\"‚ùå Hubo un error al enviar la cotizaci√≥n. Int√©ntalo de nuevo.\");\n    }\n  };\n\n  const handleNewUserMessage = (msg) => {\n    const input = msg.trim().toLowerCase();\n\n    // Manejar comandos globales\n    if (input === 'cancelar' && [\n      STEPS.MENU_SERVICIOS, \n      STEPS.EDICION_SERVICIO_SELECCION, \n      STEPS.EDICION_SERVICIO_OPCION,\n      STEPS.EDICION_SERVICIO_NUMERO,\n      STEPS.EDICION_SERVICIO_CANTIDAD,\n      STEPS.ELIMINACION_SERVICIO\n    ].includes(step)) {\n      addResponseMessage('üö´ Proceso cancelado. ¬øQuieres volver a empezar? Escribe \"inicio\".');\n      setStep(STEPS.INICIO);\n      return;\n    }\n\n    if (input === 'regresar' && [\n      STEPS.EDICION_SERVICIO_SELECCION,\n      STEPS.EDICION_SERVICIO_OPCION,\n      STEPS.EDICION_SERVICIO_NUMERO,\n      STEPS.EDICION_SERVICIO_CANTIDAD,\n      STEPS.ELIMINACION_SERVICIO\n    ].includes(step)) {\n      addResponseMessage('üîô Volviendo al men√∫ anterior...');\n      mostrarMenuServicios();\n      return;\n    }\n\n    // Si estamos editando un campo del formulario\n    if (campoAEditar !== null) {\n      manejarEdicionCampo(msg);\n      return;\n    }\n\n    // Flujo principal del chat\n    switch (step) {\n      case STEPS.INICIO:\n        if (!validarCampo('nombre', msg)) {\n          addResponseMessage('Por favor, ingresa un nombre v√°lido (inicia con may√∫scula y m√°ximo 12 letras).');\n          addResponseMessage(\"¬øCu√°l es tu nombre?\");\n          return;\n        }\n        setFormData({ ...formData, nombre: msg });\n        addResponseMessage('¬øCu√°l es tu apellido paterno?');\n        setStep(STEPS.APELLIDO);\n        break;\n\n      case STEPS.APELLIDO:\n        if (!validarCampo('apellido', msg)) {\n          addResponseMessage('Por favor, ingresa un apellido v√°lido (inicia con may√∫scula y m√°ximo 13 letras).');\n          addResponseMessage('¬øCu√°l es tu apellido paterno?');\n          return;\n        }\n        setFormData({ ...formData, apellido: msg });\n        addResponseMessage('¬øCu√°l es tu n√∫mero telef√≥nico?');\n        setStep(STEPS.TELEFONO);\n        break;\n\n      case STEPS.TELEFONO:\n        if (!validarCampo('telefono', msg)) {\n          addResponseMessage('Por favor, ingresa un n√∫mero telef√≥nico v√°lido (10 d√≠gitos).');\n          addResponseMessage('¬øCu√°l es tu n√∫mero telef√≥nico?');\n          return;\n        }\n        setFormData({ ...formData, telefono: msg });\n        addResponseMessage('¬øCu√°l es tu correo electr√≥nico?');\n        setStep(STEPS.CORREO);\n        break;\n\n      case STEPS.CORREO:\n        if (!validarCampo('correo', msg)) {\n          addResponseMessage('Por favor, ingresa un correo electr√≥nico v√°lido.');\n          addResponseMessage('¬øCu√°l es tu correo electr√≥nico?');\n          return;\n        }\n        setFormData({ ...formData, correo: msg });\n        addResponseMessage('¬øCu√°l es el nombre de la empresa?');\n        setStep(STEPS.EMPRESA);\n        break;\n\n      case STEPS.EMPRESA:\n        if (!validarCampo('empresa', msg)) {\n          addResponseMessage('Por favor, ingresa un nombre de empresa v√°lido (inicia con may√∫scula y m√°ximo 20 letras).');\n          addResponseMessage('¬øCu√°l es el nombre de la empresa?');\n          return;\n        }\n        const nuevoFormData = { ...formData, empresa: msg };\n        setFormData(nuevoFormData);\n        addResponseMessage('¬°Gracias por completar el formulario!');\n\n        const resumen = `\n          1. Nombre: ${nuevoFormData.nombre}\n          2. Apellido: ${nuevoFormData.apellido}\n          3. Correo: ${nuevoFormData.correo}\n          4. Tel√©fono: ${nuevoFormData.telefono}\n          5. Empresa: ${nuevoFormData.empresa}\n        `;\n        \n        addResponseMessage('¬øDeseas editar alg√∫n dato antes de enviar? Escribe el n√∫mero del campo que deseas editar o \"no\" para continuar.');\n        addResponseMessage(resumen);\n        setStep(STEPS.CONFIRMACION_DATOS);\n        break;\n\n      case STEPS.CONFIRMACION_DATOS:\n        if (input === 'no') {\n          addResponseMessage('Ahora se comenzara a agregar los servicios de la cotizacion');\n          addResponseMessage('Escribe los numeros de servicio separados por comas (Ejemplo: 1,2,3):');\n          setStep(STEPS.SERVICIOS_INPUT);\n        } else {\n          const opcion = parseInt(msg);\n          if (isNaN(opcion) || opcion < 1 || opcion > 5) {\n            addResponseMessage('Por favor, escribe un n√∫mero v√°lido entre 1 y 5, o \"no\" para continuar.');\n          } else {\n            setCampoAEditar(opcion);\n            const preguntas = [\n              '¬øCu√°l es tu nombre?',\n              '¬øCu√°l es tu apellido paterno?',\n              '¬øCu√°l es tu correo electr√≥nico?',\n              '¬øCu√°l es tu n√∫mero telef√≥nico?',\n              '¬øCu√°l es el nombre de la empresa?'\n            ];\n            addResponseMessage(`Vamos a corregir el campo ${opcion}:`);\n            addResponseMessage(preguntas[opcion - 1]);\n          }\n        }\n        break;\n\n      case STEPS.SERVICIOS_INPUT:\n        manejarInputServicios(msg);\n        break;\n\n      case STEPS.CANTIDADES_INPUT:\n        manejarInputCantidades(msg);\n        break;\n\n      case STEPS.MENU_SERVICIOS:\n        switch (input) {\n          case '1':\n            addResponseMessage('Dime qu√© n√∫mero(s) de servicio quieres agregar.');\n            setStep(STEPS.SERVICIOS_INPUT);\n            break;\n          case '2':\n            {\n              const resumen = generarResumenServicios(formData.servicios);\n              addResponseMessage('Servicios actuales:');\n              addResponseMessage(resumen);\n              addResponseMessage('Escribe el n√∫mero del servicio que deseas editar:');\n              setStep(STEPS.EDICION_SERVICIO_SELECCION);\n            }\n            break;\n          case '3':\n            {\n              const resumenDel = generarResumenServicios(formData.servicios);\n              addResponseMessage('Servicios actuales:');\n              addResponseMessage(resumenDel);\n              addResponseMessage('Escribe el n√∫mero del servicio que deseas eliminar:');\n              setStep(STEPS.ELIMINACION_SERVICIO);\n            }\n            break;\n          case '4':\n            {\n              const resumenFinal = generarResumenServicios(formData.servicios);\n              addResponseMessage('Resumen final de servicios:');\n              addResponseMessage(resumenFinal);\n              addResponseMessage('¬øConfirmas que deseas enviar la cotizaci√≥n? (s√≠/no)');\n              setStep(STEPS.CONFIRMACION_ENVIO);\n            }\n            break;\n          default:\n            addResponseMessage('Por favor ingresa una opci√≥n v√°lida (1, 2, 3 o 4).');\n            break;\n        }\n        break;\n\n      case STEPS.EDICION_SERVICIO_SELECCION:\n        if (input === 'no') {\n          mostrarMenuServicios();\n          return;\n        }\n\n        const indice = parseInt(msg) - 1;\n        if (!isNaN(indice) && formData.servicios[indice]) {\n          setServicioAEditar(indice);\n          addResponseMessage(`¬øQu√© deseas editar del servicio #${formData.servicios[indice].numero}? (escribe: n√∫mero o cantidad)`);\n          setStep(STEPS.EDICION_SERVICIO_OPCION);\n        } else {\n          addResponseMessage('Entrada no v√°lida. Escribe el n√∫mero del servicio a editar o \"no\" para continuar.');\n        }\n        break;\n\n      case STEPS.EDICION_SERVICIO_OPCION:\n        manejarEdicionServicio(msg);\n        break;\n\n      case STEPS.EDICION_SERVICIO_NUMERO:\n        const nuevoNumero = parseInt(msg);\n        if (isNaN(nuevoNumero) || nuevoNumero <= 0) {\n          addResponseMessage('N√∫mero inv√°lido. Ingresa un n√∫mero mayor a 0.');\n          return;\n        }\n\n        if (servicioAEditar === null || isNaN(servicioAEditar) || servicioAEditar < 0 || servicioAEditar >= formData.servicios.length) {\n          addResponseMessage('Error interno: no se pudo identificar el servicio a editar.');\n          setStep(STEPS.EDICION_SERVICIO_SELECCION);\n          return;\n        }\n\n        const serviciosEditados = [...formData.servicios];\n        serviciosEditados[servicioAEditar] = {\n          ...serviciosEditados[servicioAEditar],\n          numero: nuevoNumero,\n        };\n        \n        setFormData({ ...formData, servicios: serviciosEditados });\n        \n        if (pasoExtra === 'cantidad') {\n          setPasoExtra(null);\n          setStep(STEPS.EDICION_SERVICIO_CANTIDAD);\n          addResponseMessage('Escribe la nueva cantidad del servicio:');\n        } else {\n          setServicioAEditar(null);\n          addResponseMessage('¬°Servicio actualizado!');\n          mostrarResumenServicios();\n          setStep(STEPS.MENU_SERVICIOS);\n        }\n        break;\n\n      case STEPS.EDICION_SERVICIO_CANTIDAD:\n        const nuevaCantidad = parseInt(msg);\n        if (isNaN(nuevaCantidad) || nuevaCantidad <= 0) {\n          addResponseMessage('Cantidad inv√°lida. Ingresa un n√∫mero mayor a 0.');\n          return;\n        }\n\n        const serviciosActualizados = [...formData.servicios];\n        serviciosActualizados[servicioAEditar].cantidad = nuevaCantidad;\n        setFormData({ ...formData, servicios: serviciosActualizados });\n\n        setServicioAEditar(null);\n        addResponseMessage('¬°Cantidad actualizada!');\n        mostrarResumenServicios();\n        setStep(STEPS.MENU_SERVICIOS);\n        break;\n\n      case STEPS.ELIMINACION_SERVICIO:\n        manejarEliminacionServicio(msg);\n        break;\n\n      case STEPS.CONFIRMACION_ENVIO:\n        if (input === 'si' || input === 's√≠') {\n          enviarDatos();\n          addResponseMessage('¬°Cotizaci√≥n enviada!');\n          addResponseMessage('¬øDeseas crear otra cotizaci√≥n? (s√≠/no)');\n          setStep(STEPS.FINAL);\n        } else if (input === 'no') {\n          addResponseMessage('¬°Gracias por usar nuestro servicio!');\n          addResponseMessage('¬øDeseas crear otra cotizaci√≥n? (s√≠/no)');\n          setStep(STEPS.FINAL);\n        }\n        break;\n\n      case STEPS.FINAL:\n        if (input === 's√≠' || input === 'si') {\n          setFormData({\n            nombre: '',\n            apellido: '',\n            correo: '',\n            telefono: '',\n            empresa: '',\n            fechaSolicitud: '',\n            fechaCaducidad: '',\n            servicios: [],\n          });\n          addResponseMessage(\"Perfecto. ¬øCu√°l es tu nombre?\");\n          setStep(STEPS.INICIO);\n        } else {\n          addResponseMessage('¬°Gracias por usar nuestro servicio!');\n          setStep(STEPS.TERMINADO);\n        }\n        break;\n\n      default:\n        addResponseMessage('Ya hemos terminado. ¬°Gracias!');\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Chatbot de Cotizaci√≥n</h1>\n      <Widget\n        handleNewUserMessage={handleNewUserMessage}\n        title=\"Chat de Cotizaci√≥n\"\n        subtitle=\"Estamos para ayudarte\"\n      />\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}