{"ast":null,"code":"var _jsxFileName = \"/Users/appletech/Desktop/chatbottest/chatbottest/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { createServicioPreCotizacion, createPreCotizacion } from './api/Api';\nimport { Widget, addResponseMessage } from 'react-chat-widget-react-18';\nimport 'react-chat-widget-react-18/lib/styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [step, setStep] = React.useState(0);\n  const [formData, setFormData] = useState({\n    nombre: '',\n    apellido: '',\n    correo: '',\n    telefono: '',\n    empresa: '',\n    fechaSolicitud: '',\n    fechaCaducidad: '',\n    servicios: []\n  });\n  const [servicioActual, setServicioActual] = useState({});\n  const hasGreeted = React.useRef(false);\n  React.useEffect(() => {\n    if (!hasGreeted.current) {\n      addResponseMessage('¡Hola! Soy un chatbot. ¿Quieres crear una cotización?');\n      addResponseMessage('Para crear una cotización necesito algunos datos.');\n      addResponseMessage(\"¿Cuál es tu nombre?\");\n      hasGreeted.current = true;\n    }\n  }, []);\n  const validacionNombre = nombre => {\n    const regex = /^[A-Z][a-zA-Z]{0,12}$/;\n    return regex.test(nombre);\n  };\n  const validacionApellido = apellido => {\n    const regex = /^[A-Z][a-zA-Z]{0,13}$/;\n    return regex.test(apellido);\n  };\n  const validacionCorreo = correo => {\n    const regex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n    return regex.test(correo);\n  };\n  const validacionTelefono = telefono => {\n    const regex = /^[0-9]{10}$/;\n    return regex.test(telefono);\n  };\n  const validacionEmpresa = empresa => {\n    const regex = /^[A-Z][a-zA-Z]{0,20}$/;\n    return regex.test(empresa);\n  };\n  const validacionFecha = fecha => {\n    const regex = /^\\d{4}-\\d{2}-\\d{2}$/;\n    return regex.test(fecha);\n  };\n  const validacionServicio = servicio => {\n    const regex = /^[0-9]{1,3}$/;\n    return regex.test(servicio);\n  };\n  const validacionCantidad = cantidad => {\n    const regex = /^[0-9]{1,3}$/;\n    return regex.test(cantidad);\n  };\n  /*nombreEmpresa: empresa,\n        nombreCliente: nombre,\n        apellidoCliente: apellido,\n        correo: correos,\n        denominacion: tiposMonedaData.find((moneda) => moneda.id === tipoMonedaSeleccionada)?.codigo.replace(\"-\", \"\") || \"N/A\",\n        fechaSolicitud: fechaSolicitada.format(\"YYYY-MM-DD\"),\n        fechaCaducidad: fechaCaducidad ? fechaCaducidad.format(\"YYYY-MM-DD\") : null,\n        descuento: descuento,\n        iva: ivaSeleccionado,\n        organizacion: organizationId,\n        tipoMoneda: tipoMonedaSeleccionada,\n        estado: 8, */\n\n  const enviarDatos = async () => {\n    try {\n      // Crear la pre-cotización principal\n      const preCotizacion = await createPreCotizacion({\n        nombreCliente: formData.nombre,\n        apellidoCliente: formData.apellido,\n        correo: formData.correo,\n        denominacion: \"MXN\",\n        telefono: formData.telefono,\n        empresa: formData.empresa,\n        fechaSolicitud: formData.fechaSolicitud,\n        fechaCaducidad: formData.fechaCaducidad,\n        descuento: 0,\n        iva: 1,\n        organizacion: 1,\n        tipoMoneda: 1,\n        estado: 8\n      });\n      const idPreCotizacion = preCotizacion.id; // Ajusta según tu respuesta\n\n      // Crear los servicios asociados\n      for (const servicio of formData.servicios) {\n        await createServicioPreCotizacion({\n          ...servicio,\n          idPreCotizacion\n        });\n      }\n      addResponseMessage(\"✅ ¡Cotización enviada exitosamente!\");\n      console.log(\"Datos enviados:\", formData);\n    } catch (error) {\n      console.error(\"Error al enviar datos:\", error);\n      addResponseMessage(\"❌ Hubo un error al enviar la cotización. Inténtalo de nuevo.\");\n    }\n  };\n  const handleNewUserMessage = msg => {\n    switch (step) {\n      case 0:\n        if (!validacionNombre(msg)) {\n          addResponseMessage('Por favor, ingresa un nombre válido (inicia con mayúscula y máximo 12 letras).');\n          addResponseMessage(\"¿Cuál es tu nombre?\");\n          return;\n        }\n        setFormData({\n          ...formData,\n          nombre: msg\n        });\n        addResponseMessage('¿Cuál es tu apellido paterno?');\n        setStep(1);\n        break;\n      case 1:\n        if (!validacionApellido(msg)) {\n          addResponseMessage('Por favor, ingresa un apellido válido (inicia con mayúscula y máximo 13 letras).');\n          addResponseMessage('¿Cuál es tu apellido paterno?');\n          return;\n        }\n        setFormData({\n          ...formData,\n          apellido: msg\n        });\n        addResponseMessage('¿Cuál es tu correo electrónico?');\n        setStep(2);\n        break;\n      case 2:\n        if (!validacionCorreo(msg)) {\n          addResponseMessage('Por favor, ingresa un correo electrónico válido.');\n          addResponseMessage('¿Cuál es tu correo electrónico?');\n          return;\n        }\n        setFormData({\n          ...formData,\n          correo: msg\n        });\n        addResponseMessage('¿Cuál es tu número telefónico?');\n        setStep(3);\n        break;\n      case 3:\n        if (!validacionTelefono(msg)) {\n          addResponseMessage('Por favor, ingresa un número telefónico válido (10 dígitos).');\n          addResponseMessage('¿Cuál es tu número telefónico?');\n          return;\n        }\n        setFormData({\n          ...formData,\n          telefono: msg\n        });\n        addResponseMessage('¿Cuál es el nombre de la empresa?');\n        setStep(4);\n        break;\n      case 4:\n        if (!validacionEmpresa(msg)) {\n          addResponseMessage('Por favor, ingresa un nombre de empresa válido (inicia con mayúscula y máximo 20 letras).');\n          addResponseMessage('¿Cuál es el nombre de la empresa?');\n          return;\n        }\n        setFormData({\n          ...formData,\n          empresa: msg\n        });\n        addResponseMessage('¿Cuál es la fecha que solicitas? (YYYY-MM-DD)');\n        setStep(5);\n        break;\n      case 5:\n        if (!validacionFecha(msg)) {\n          addResponseMessage('Por favor, ingresa una fecha válida (YYYY-MM-DD).');\n          addResponseMessage('¿Cuál es la fecha que solicitas? (YYYY-MM-DD)');\n          return;\n        }\n        const fechaSolicitud = msg;\n        const fechaCaducidad = new Date(new Date(fechaSolicitud).getTime() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0];\n        setFormData({\n          ...formData,\n          fechaSolicitud,\n          fechaCaducidad\n        });\n        addResponseMessage(`La fecha de caducidad será: ${fechaCaducidad}`);\n        addResponseMessage('Ahora comenzaras a agregar los servicios');\n        addResponseMessage('Escribe el número de servicio:');\n        setStep(6);\n        break;\n      case 6:\n        if (!validacionServicio(msg)) {\n          addResponseMessage('Por favor, ingresa un número de servicio válido (1-3 dígitos).');\n          addResponseMessage('Escribe el número de servicio:');\n          return;\n        }\n        setServicioActual({\n          numero: msg\n        });\n        addResponseMessage('¿Cuál es la cantidad del servicio?');\n        setStep(7);\n        break;\n      case 7:\n        if (!validacionCantidad(msg)) {\n          addResponseMessage('Por favor, ingresa una cantidad válida (1-3 dígitos).');\n          addResponseMessage('¿Cuál es la cantidad del servicio?');\n          return;\n        }\n        const servicio = {\n          ...servicioActual,\n          cantidad: msg\n        };\n        const nuevosServicios = [...formData.servicios, servicio];\n        setFormData({\n          ...formData,\n          servicios: nuevosServicios\n        });\n        setServicioActual({});\n        addResponseMessage('¿Deseas agregar otro servicio? (sí/no)');\n        setStep(8);\n        break;\n      case 8:\n        if (msg.toLowerCase() === 'sí' || msg.toLowerCase() === 'si') {\n          addResponseMessage('Escribe el número de servicio:');\n          setStep(6);\n        } else {\n          addResponseMessage('¡Gracias por completar el formulario!');\n          console.log('Datos finales del formulario:', formData);\n          setStep(9);\n        }\n        break;\n      default:\n        addResponseMessage('Ya hemos terminado. ¡Gracias!');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Mi App con Chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Widget, {\n      handleNewUserMessage: handleNewUserMessage,\n      title: \"Chat De Cotizacion\",\n      subtitle: \"Estamos para ayudarte\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 219,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"9Tk+J1Q+cUfe5GAjXX07v8NkNfA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","createServicioPreCotizacion","createPreCotizacion","Widget","addResponseMessage","jsxDEV","_jsxDEV","App","_s","step","setStep","formData","setFormData","nombre","apellido","correo","telefono","empresa","fechaSolicitud","fechaCaducidad","servicios","servicioActual","setServicioActual","hasGreeted","useRef","current","validacionNombre","regex","test","validacionApellido","validacionCorreo","validacionTelefono","validacionEmpresa","validacionFecha","fecha","validacionServicio","servicio","validacionCantidad","cantidad","enviarDatos","preCotizacion","nombreCliente","apellidoCliente","denominacion","descuento","iva","organizacion","tipoMoneda","estado","idPreCotizacion","id","console","log","error","handleNewUserMessage","msg","Date","getTime","toISOString","split","numero","nuevosServicios","toLowerCase","className","children","fileName","_jsxFileName","lineNumber","columnNumber","title","subtitle","_c","$RefreshReg$"],"sources":["/Users/appletech/Desktop/chatbottest/chatbottest/src/App.js"],"sourcesContent":["import React,{useEffect, useState} from 'react';\nimport {createServicioPreCotizacion, createPreCotizacion } from './api/Api';\nimport { Widget, addResponseMessage } from 'react-chat-widget-react-18';\nimport 'react-chat-widget-react-18/lib/styles.css';\n\nfunction App() {\n  const [step, setStep] = React.useState(0);\n  const [formData, setFormData] = useState({\n    nombre: '',\n    apellido: '',\n    correo: '',\n    telefono: '',\n    empresa: '',\n    fechaSolicitud: '',\n    fechaCaducidad: '',\n    servicios: [],\n  });\n  const [servicioActual, setServicioActual] = useState({});\n  const hasGreeted = React.useRef(false);\n\n  React.useEffect(() => {\n    if (!hasGreeted.current) {\n      addResponseMessage('¡Hola! Soy un chatbot. ¿Quieres crear una cotización?');\n      addResponseMessage('Para crear una cotización necesito algunos datos.');\n      addResponseMessage(\"¿Cuál es tu nombre?\");\n      hasGreeted.current = true;\n    }\n  }, []);\n  const validacionNombre = (nombre) => {\n    const regex = /^[A-Z][a-zA-Z]{0,12}$/;\n    return regex.test(nombre);\n  }\n  const validacionApellido = (apellido) => {\n    const regex = /^[A-Z][a-zA-Z]{0,13}$/;\n    return regex.test(apellido);\n  }\n  const validacionCorreo = (correo) => {\n    const regex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n    return regex.test(correo);\n  }\n  const validacionTelefono = (telefono) => {\n    const regex = /^[0-9]{10}$/;\n    return regex.test(telefono);\n  }\n  const validacionEmpresa = (empresa) => {\n    const regex = /^[A-Z][a-zA-Z]{0,20}$/;\n    return regex.test(empresa);\n  }\n  const validacionFecha = (fecha) => {\n    const regex = /^\\d{4}-\\d{2}-\\d{2}$/;\n    return regex.test(fecha);\n  }\n  const validacionServicio = (servicio) => {\n    const regex = /^[0-9]{1,3}$/;\n    return regex.test(servicio);\n  }\n  const validacionCantidad = (cantidad) => {\n    const regex = /^[0-9]{1,3}$/;\n    return regex.test(cantidad);\n  }\n  /*nombreEmpresa: empresa,\n        nombreCliente: nombre,\n        apellidoCliente: apellido,\n        correo: correos,\n        denominacion: tiposMonedaData.find((moneda) => moneda.id === tipoMonedaSeleccionada)?.codigo.replace(\"-\", \"\") || \"N/A\",\n        fechaSolicitud: fechaSolicitada.format(\"YYYY-MM-DD\"),\n        fechaCaducidad: fechaCaducidad ? fechaCaducidad.format(\"YYYY-MM-DD\") : null,\n        descuento: descuento,\n        iva: ivaSeleccionado,\n        organizacion: organizationId,\n        tipoMoneda: tipoMonedaSeleccionada,\n        estado: 8, */\n\n  const enviarDatos = async () => {\n    try {\n      // Crear la pre-cotización principal\n      const preCotizacion = await createPreCotizacion({\n        nombreCliente: formData.nombre,\n        apellidoCliente: formData.apellido,\n        correo: formData.correo,\n        denominacion:\"MXN\",\n        telefono: formData.telefono,\n        empresa: formData.empresa,\n        fechaSolicitud: formData.fechaSolicitud,\n        fechaCaducidad: formData.fechaCaducidad,\n        descuento:0,\n        iva:1,\n        organizacion:1,\n        tipoMoneda:1,\n        estado: 8,\n      });\n  \n      const idPreCotizacion = preCotizacion.id; // Ajusta según tu respuesta\n  \n      // Crear los servicios asociados\n      for (const servicio of formData.servicios) {\n        await createServicioPreCotizacion({\n          ...servicio,\n          idPreCotizacion,\n        });\n      }\n  \n      addResponseMessage(\"✅ ¡Cotización enviada exitosamente!\");\n      console.log(\"Datos enviados:\", formData);\n    } catch (error) {\n      console.error(\"Error al enviar datos:\", error);\n      addResponseMessage(\"❌ Hubo un error al enviar la cotización. Inténtalo de nuevo.\");\n    }\n  };\n        \n\n  const handleNewUserMessage = (msg) => {\n    switch (step) {\n      case 0:\n        if (!validacionNombre(msg)) {\n          addResponseMessage('Por favor, ingresa un nombre válido (inicia con mayúscula y máximo 12 letras).');\n          addResponseMessage(\"¿Cuál es tu nombre?\");\n          return;\n        }\n        setFormData({ ...formData, nombre: msg });\n        addResponseMessage('¿Cuál es tu apellido paterno?');\n        setStep(1);\n        break;\n      case 1:\n        if(!validacionApellido(msg)) {\n          addResponseMessage('Por favor, ingresa un apellido válido (inicia con mayúscula y máximo 13 letras).');\n          addResponseMessage('¿Cuál es tu apellido paterno?');\n          return;\n        }\n        setFormData({ ...formData, apellido: msg });\n        addResponseMessage('¿Cuál es tu correo electrónico?');\n        setStep(2);\n        break;\n      case 2:\n        if (!validacionCorreo(msg)) {\n          addResponseMessage('Por favor, ingresa un correo electrónico válido.');\n          addResponseMessage('¿Cuál es tu correo electrónico?');\n          return;\n        }\n        setFormData({ ...formData, correo: msg });\n        addResponseMessage('¿Cuál es tu número telefónico?');\n        setStep(3);\n        break;\n      case 3:\n        if (!validacionTelefono(msg)) {\n          addResponseMessage('Por favor, ingresa un número telefónico válido (10 dígitos).');\n          addResponseMessage('¿Cuál es tu número telefónico?');\n          return;\n        }\n        setFormData({ ...formData, telefono: msg });\n        addResponseMessage('¿Cuál es el nombre de la empresa?');\n        setStep(4);\n        break;\n      case 4:\n        if (!validacionEmpresa(msg)) {\n          addResponseMessage('Por favor, ingresa un nombre de empresa válido (inicia con mayúscula y máximo 20 letras).');\n          addResponseMessage('¿Cuál es el nombre de la empresa?');\n          return;\n        }\n        setFormData({ ...formData, empresa: msg });\n        addResponseMessage('¿Cuál es la fecha que solicitas? (YYYY-MM-DD)');\n        setStep(5);\n        break;\n      case 5:\n        if (!validacionFecha(msg)) {\n          addResponseMessage('Por favor, ingresa una fecha válida (YYYY-MM-DD).');\n          addResponseMessage('¿Cuál es la fecha que solicitas? (YYYY-MM-DD)');\n          return;\n        }\n        const fechaSolicitud = msg;\n        const fechaCaducidad = new Date(new Date(fechaSolicitud).getTime() + 30 * 24 * 60 * 60 * 1000)\n          .toISOString()\n          .split('T')[0];\n        setFormData({ ...formData, fechaSolicitud, fechaCaducidad });\n        addResponseMessage(`La fecha de caducidad será: ${fechaCaducidad}`);\n        addResponseMessage('Ahora comenzaras a agregar los servicios');\n        addResponseMessage('Escribe el número de servicio:');\n        setStep(6);\n        break;\n      case 6:\n        if (!validacionServicio(msg)) {\n          addResponseMessage('Por favor, ingresa un número de servicio válido (1-3 dígitos).');\n          addResponseMessage('Escribe el número de servicio:');\n          return;\n        }\n        setServicioActual({ numero: msg });\n        addResponseMessage('¿Cuál es la cantidad del servicio?');\n        setStep(7);\n        break;\n      case 7:\n        if (!validacionCantidad(msg)) {\n          addResponseMessage('Por favor, ingresa una cantidad válida (1-3 dígitos).');\n          addResponseMessage('¿Cuál es la cantidad del servicio?');\n          return;\n        }\n        const servicio = { ...servicioActual, cantidad: msg };\n        const nuevosServicios = [...formData.servicios, servicio];\n        setFormData({ ...formData, servicios: nuevosServicios });\n        setServicioActual({});\n        addResponseMessage('¿Deseas agregar otro servicio? (sí/no)');\n        setStep(8);\n        break;\n      case 8:\n        if (msg.toLowerCase() === 'sí' || msg.toLowerCase() === 'si') {\n          addResponseMessage('Escribe el número de servicio:');\n          setStep(6);\n        } else {\n          addResponseMessage('¡Gracias por completar el formulario!');\n          console.log('Datos finales del formulario:', formData);\n          setStep(9);\n        }\n        break;\n      default:\n        addResponseMessage('Ya hemos terminado. ¡Gracias!');\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Mi App con Chat</h1>\n      <Widget\n        handleNewUserMessage={handleNewUserMessage}\n        title=\"Chat De Cotizacion\"\n        subtitle=\"Estamos para ayudarte\"\n      />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}