{"ast":null,"code":"var _jsxFileName = \"/Users/appletech/Desktop/chatbottest/chatbottest/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { createServicioPreCotizacion, createPreCotizacion, getServicioData } from './api/Api';\nimport { Widget, addResponseMessage } from 'react-chat-widget-react-18';\nimport 'react-chat-widget-react-18/lib/styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [step, setStep] = React.useState(0);\n  const [formData, setFormData] = useState({\n    nombre: '',\n    apellido: '',\n    correo: '',\n    telefono: '',\n    empresa: '',\n    fechaSolicitud: '',\n    fechaCaducidad: '',\n    servicios: []\n  });\n  const [servicioActual, setServicioActual] = useState({});\n  const hasGreeted = React.useRef(false);\n  const [servicioTemporal, setServicioTemporal] = useState({\n    numero: null,\n    cantidad: null\n  });\n  const [servicioAEditar, setServicioAEditar] = useState(null); // puede ser un índice\n  const [campoAEditar, setCampoAEditar] = useState(null);\n  const [pasoExtra, setPasoExtra] = useState(null); // variable temporal para saber que luego viene la cantidad\n  const [servicios, setServicios] = useState([]); // Estado para almacenar los servicios\n\n  React.useEffect(() => {\n    if (!hasGreeted.current) {\n      addResponseMessage('¡Hola! Soy un chatbot. ¿Quieres crear una cotización?');\n      addResponseMessage('Para crear una cotización necesito algunos datos.');\n      addResponseMessage(\"¿Cuál es tu nombre?\");\n      hasGreeted.current = true;\n    }\n  }, []);\n  useEffect(() => {\n    const fetchServicios = async () => {\n      try {\n        const response = await getServicioData(7); // Cambia el ID según sea necesario\n        setServicios(response.data);\n        console.log(\"Servicios:\", response.data);\n      } catch (error) {\n        console.error(\"Error al obtener servicios:\", error);\n      }\n    };\n    fetchServicios();\n  }, []);\n  const validacionNombre = nombre => {\n    const regex = /^([A-Z][a-z]+)(\\s[A-Z][a-z]+)*$/;\n    return regex.test(nombre) && nombre.length <= 15;\n  };\n  const validacionApellido = apellido => {\n    const regex = /^[A-Z][a-zA-Z]{0,13}$/;\n    return regex.test(apellido);\n  };\n  const validacionCorreo = correo => {\n    const regex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n    return regex.test(correo);\n  };\n  const validacionTelefono = telefono => {\n    const regex = /^[0-9]{10}$/;\n    return regex.test(telefono);\n  };\n  const validacionEmpresa = empresa => {\n    const regex = /^[A-Z][a-zA-Z]{0,20}$/;\n    return regex.test(empresa);\n  };\n  /*const validacionFecha = (fecha) => {\n    const regex = /^\\d{4}-\\d{2}-\\d{2}$/;\n    return regex.test(fecha);\n  } */\n  const validacionServicio = servicio => {\n    const regex = /^[0-9]{1,3}$/;\n    return regex.test(servicio);\n  };\n  const validacionCantidad = cantidad => {\n    const regex = /^[0-9]{1,3}$/;\n    return regex.test(cantidad);\n  };\n  const mostrarResumenServicios = servicio => {\n    if (!servicio || servicio.length === 0) {\n      addResponseMessage('No hay servicios agregados.');\n      return;\n    }\n    //const serviciosTotales = [...servicio, ...nuevosServicios];\n    const resumenServicios = generarResumenServicios(servicio, servicios);\n    /*const resumen = servicio.map((s, i) =>\n      `${i + 1}. Servicio #${s.numero}, Cantidad: ${s.cantidad}`\n    ).join('\\n'); */\n\n    addResponseMessage('Resumen de servicios 2:');\n    addResponseMessage(resumenServicios);\n    addResponseMessage('¿Qué deseas hacer ahora?\\n1. Agregar más servicios\\n2. Editar un servicio\\n3. Eliminar un servicio\\n4. Continuar con la cotización');\n    //addResponseMessage('¿Deseas editar alguno? Escribe el número del servicio en la lista o \"no\" para continuar.');\n  };\n  function generarResumenServicios(serviciosTotales, serviciosData) {\n    return serviciosTotales.map((s, i) => {\n      const info = serviciosData.find(serv => serv.numero === s.numero);\n      const nombre = info ? info.nombreServicio : `Servicio #${s.numero}`;\n      return `${i + 1}. ${nombre}, Cantidad: ${s.cantidad}`;\n    }).join('\\n');\n  }\n  const enviarDatos = async () => {\n    try {\n      const today = new Date();\n      const fechaSolicitud = today.toISOString().split('T')[0]; // formato YYYY-MM-DD\n\n      const futureDate = new Date();\n      futureDate.setDate(today.getDate() + 30);\n      const fechaCaducidad = futureDate.toISOString().split('T')[0];\n      // Crear la pre-cotización principal\n      const preCotizacion = await createPreCotizacion({\n        nombreCliente: formData.nombre,\n        apellidoCliente: formData.apellido,\n        correo: formData.correo,\n        denominacion: \"MXN\",\n        //telefono: formData.telefono,\n        nombreEmpresa: formData.empresa,\n        fechaSolicitud: fechaSolicitud,\n        fechaCaducidad: fechaCaducidad,\n        descuento: 0,\n        iva: 1,\n        organizacion: 7,\n        tipoMoneda: 1,\n        estado: 8\n      });\n      //console.log(\"Pre-cotización creada:\", preCotizacion);\n      // Aquí puedes obtener el ID de la pre-cotización creada\n      const idPreCotizacion = preCotizacion.data.id; // Ajusta según tu respuesta\n      //console.log(\"ID de la pre-cotización:\", idPreCotizacion);\n      //console.log(\"Servicios a agregar:\", formData.servicios);\n      // Crear los servicios asociados\n      for (const servicio of formData.servicios) {\n        console.log(\"Servicio a agregar:\", servicio);\n        const servicioEncontrado = servicios.find(s => s.numero === Number(servicio.numero));\n        //console.log(\"Servicio a agregar cantidad:\", servicio.cantidad);\n        //console.log(\"Servicio a agregar numero\", servicio.numero);\n        await createServicioPreCotizacion({\n          descripcion: \"Sin descripción\",\n          precio: \"0\",\n          cantidad: Number(servicio.cantidad) || 0,\n          preCotizacion: idPreCotizacion,\n          servicio: servicioEncontrado.id\n        });\n      }\n      addResponseMessage(\"✅ ¡Cotización enviada exitosamente!\");\n      //console.log(\"Datos enviados:\", formData);\n    } catch (error) {\n      console.error(\"Error al enviar datos:\", error);\n      addResponseMessage(\"❌ Hubo un error al enviar la cotización. Inténtalo de nuevo.\");\n    }\n  };\n  const handleNewUserMessage = msg => {\n    if (campoAEditar !== null) {\n      let valid = false;\n      let nuevoFormData = {\n        ...formData\n      };\n      switch (campoAEditar) {\n        case 1:\n          valid = validacionNombre(msg);\n          if (valid) nuevoFormData.nombre = msg;\n          break;\n        case 2:\n          valid = validacionApellido(msg);\n          if (valid) nuevoFormData.apellido = msg;\n          break;\n        case 3:\n          valid = validacionCorreo(msg);\n          if (valid) nuevoFormData.correo = msg;\n          break;\n        case 4:\n          valid = validacionTelefono(msg);\n          if (valid) nuevoFormData.telefono = msg;\n          break;\n        case 5:\n          valid = validacionEmpresa(msg);\n          if (valid) nuevoFormData.empresa = msg;\n          break;\n        default:\n          addResponseMessage('Opción no válida. Intenta de nuevo.');\n          return;\n      }\n      if (!valid) {\n        addResponseMessage('Dato inválido. Intenta de nuevo:');\n        return;\n      }\n      setFormData(nuevoFormData);\n      setCampoAEditar(null); // salimos del modo edición\n\n      const resumen = `\n    1. Nombre: ${nuevoFormData.nombre}\n    2. Apellido: ${nuevoFormData.apellido}\n    3. Correo: ${nuevoFormData.correo}\n    4. Teléfono: ${nuevoFormData.telefono}\n    5. Empresa: ${nuevoFormData.empresa}\n      `;\n      addResponseMessage('¡Dato actualizado!');\n      addResponseMessage('Resumen actualizado:');\n      addResponseMessage(resumen);\n      addResponseMessage('¿Deseas editar otro dato? Escribe el número o \"no\" para continuar.');\n      return;\n    }\n    switch (step) {\n      case 0:\n        if (!validacionNombre(msg)) {\n          addResponseMessage('Por favor, ingresa un nombre válido (inicia con mayúscula y máximo 12 letras).');\n          addResponseMessage(\"¿Cuál es tu nombre?\");\n          return;\n        }\n        setFormData({\n          ...formData,\n          nombre: msg\n        });\n        addResponseMessage('¿Cuál es tu apellido paterno?');\n        setStep(1);\n        break;\n      case 1:\n        if (!validacionApellido(msg)) {\n          addResponseMessage('Por favor, ingresa un apellido válido (inicia con mayúscula y máximo 13 letras).');\n          addResponseMessage('¿Cuál es tu apellido paterno?');\n          return;\n        }\n        setFormData({\n          ...formData,\n          apellido: msg\n        });\n        addResponseMessage('¿Cuál es tu correo electrónico?');\n        setStep(2);\n        break;\n      case 2:\n        if (!validacionCorreo(msg)) {\n          addResponseMessage('Por favor, ingresa un correo electrónico válido.');\n          addResponseMessage('¿Cuál es tu correo electrónico?');\n          return;\n        }\n        setFormData({\n          ...formData,\n          correo: msg\n        });\n        addResponseMessage('¿Cuál es tu número telefónico?');\n        setStep(3);\n        break;\n      case 3:\n        if (!validacionTelefono(msg)) {\n          addResponseMessage('Por favor, ingresa un número telefónico válido (10 dígitos).');\n          addResponseMessage('¿Cuál es tu número telefónico?');\n          return;\n        }\n        setFormData({\n          ...formData,\n          telefono: msg\n        });\n        addResponseMessage('¿Cuál es el nombre de la empresa?');\n        setStep(4);\n        break;\n      case 4:\n        if (!validacionEmpresa(msg)) {\n          addResponseMessage('Por favor, ingresa un nombre de empresa válido (inicia con mayúscula y máximo 20 letras).');\n          addResponseMessage('¿Cuál es el nombre de la empresa?');\n          return;\n        }\n        const nuevoFormData = {\n          ...formData,\n          empresa: msg\n        };\n        setFormData(nuevoFormData);\n        addResponseMessage('¡Gracias por completar el formulario!');\n        console.log('Datos finales del formulario:', formData);\n\n        // Mostrar resumen para edición\n        const resumen = `\n      1. Nombre: ${nuevoFormData.nombre}\n      2. Apellido: ${nuevoFormData.apellido}\n      3. Correo: ${nuevoFormData.correo}\n      4. Teléfono: ${nuevoFormData.telefono}\n      5. Empresa: ${nuevoFormData.empresa}\n          `;\n        addResponseMessage('¿Deseas editar algún dato antes de enviar? Escribe el número del campo que deseas editar o \"no\" para continuar.');\n        addResponseMessage(resumen);\n        setStep(111);\n        //addResponseMessage('Ahora comenzaras a agregar los servicios');\n        //addResponseMessage('Escribe el número de servicio:');\n\n        //setStep(6);\n        break;\n      case 5:\n        if (!validacionEmpresa(msg)) {\n          addResponseMessage('Por favor, ingresa un nombre de empresa válido (inicia con mayúscula y máximo 20 letras).');\n          addResponseMessage('¿Cuál es el nombre de la empresa?');\n          return;\n        }\n        //setFormData({ ...formData, empresa: msg });\n        addResponseMessage('Ahora se comenzara a agregar los servicios de la cotizacion');\n        addResponseMessage('Escribe el número de servicio:');\n        break;\n      case 111:\n        //console.log('Campo a editar msg:', msg);\n        if (msg.toLowerCase() === 'no') {\n          //enviarDatos();\n          //addResponseMessage('Datos enviados correctamente. ¿Deseas crear otra cotización? (sí/no)');\n          addResponseMessage('Ahora se comenzara a agregar los servicios de la cotizacion');\n          addResponseMessage('Escribe los numeros de servicio separados por comas (Ejemplo: 1,2,3):');\n          setStep(7);\n        } else {\n          const opcion = parseInt(msg);\n          if (isNaN(opcion) || opcion < 1 || opcion > 5) {\n            addResponseMessage('Por favor, escribe un número válido entre 1 y 5, o \"no\" para continuar.');\n          } else {\n            console.log('Campo a editar:', opcion);\n            setCampoAEditar(opcion); // regresa al paso correspondiente\n            console.log('Campo a editar:', campoAEditar);\n            const preguntas = ['¿Cuál es tu nombre?', '¿Cuál es tu apellido paterno?', '¿Cuál es tu correo electrónico?', '¿Cuál es tu número telefónico?', '¿Cuál es el nombre de la empresa?'];\n            addResponseMessage(`Vamos a corregir el campo ${opcion}:`);\n            addResponseMessage(preguntas[opcion - 1]);\n          }\n        }\n        //setStep(6);\n        break;\n      case 6:\n        addResponseMessage('Ahora comenzaras a agregar los servicios');\n        addResponseMessage('Escribe los numeros de servicio separados por comas (Ejemplo: 1,2,3):');\n        setStep(7);\n        return;\n      //break;\n      case 7:\n        // Entrada de varios números de servicio\n        const partes = msg.split(',').map(p => p.trim());\n        const numeros = [];\n        let hayInvalido = false;\n        for (let parte of partes) {\n          const numero = parseInt(parte, 10);\n          if (!/^\\d+$/.test(parte) || isNaN(numero)) {\n            hayInvalido = true;\n            break;\n          }\n          numeros.push(numero);\n        }\n        if (hayInvalido) {\n          addResponseMessage('❌ Solo se permiten números enteros separados por coma. Intenta de nuevo.');\n          return;\n        }\n        setServicioTemporal({\n          ...servicioTemporal,\n          numeros\n        }); // guarda varios\n        addResponseMessage('¿Cuántos necesita de cada uno? Ingresa las cantidades separadas por comas en el mismo orden.');\n        console.log('Paso actual:', step);\n        setStep(8);\n        console.log('Paso actual:', step);\n        break;\n      case 8:\n        // Entrada de varias cantidades\n        const cantidades = msg.split(',').map(c => parseInt(c.trim())).filter(c => !isNaN(c));\n        if (cantidades.length !== servicioTemporal.numeros.length) {\n          addResponseMessage('El número de cantidades no coincide con el número de servicios. Intenta de nuevo.');\n          return;\n        }\n        const nuevosServicios = servicioTemporal.numeros.map((numero, index) => ({\n          numero,\n          cantidad: cantidades[index]\n        }));\n        setFormData(prev => ({\n          ...prev,\n          servicios: [...prev.servicios, ...nuevosServicios]\n        }));\n        setServicioTemporal({\n          numeros: []\n        });\n        /*addResponseMessage('¿Quieres agregar más servicios? (sí/no)');\n        setStep(9); */\n        const serviciosTotales = [...formData.servicios, ...nuevosServicios];\n        const resumenServicios = generarResumenServicios(serviciosTotales, servicios);\n        addResponseMessage('✅ Servicios agregados:');\n        addResponseMessage(resumenServicios);\n        addResponseMessage('¿Qué deseas hacer ahora?\\n1. Agregar más servicios\\n2. Editar un servicio\\n3. Eliminar un servicio\\n4. Continuar con la cotización');\n        setStep(9);\n        break;\n      case 9:\n        switch (msg.trim()) {\n          case '1':\n            addResponseMessage('Dime qué número(s) de servicio quieres agregar.');\n            setStep(7); // Paso para seleccionar más servicios\n            break;\n          case '2':\n            const resumen = generarResumenServicios(formData.servicios, servicios);\n            addResponseMessage('Servicios actuales:');\n            addResponseMessage(resumen);\n            addResponseMessage('Escribe el número del servicio que deseas editar:');\n            setStep(91); // Paso de edición\n            break;\n          case '3':\n            const resumenDel = generarResumenServicios(formData.servicios, servicios);\n            addResponseMessage('Servicios actuales:');\n            addResponseMessage(resumenDel);\n            addResponseMessage('Escribe el número del servicio que deseas eliminar:');\n            setStep(95); // Paso de eliminación\n            break;\n          case '4':\n            const resumenFinal = generarResumenServicios(formData.servicios, servicios);\n            addResponseMessage('Resumen final de servicios:');\n            addResponseMessage(resumenFinal);\n            addResponseMessage('¿Confirmas que deseas enviar la cotización? (sí/no)');\n            setStep(10); // Paso final para confirmar y enviar\n            break;\n          default:\n            addResponseMessage('Por favor ingresa una opción válida (1, 2, 3 o 4).');\n            break;\n        }\n        break;\n      case 91:\n        if (msg.toLowerCase() === 'no') {\n          /*enviarDatos();\n          setStep(999);\n          addResponseMessage('¡Cotización enviada!');\n          addResponseMessage('¿Deseas crear otra cotización? (sí/no)');\n          setStep(10); */\n          const resumen = generarResumenServicios(formData.servicios, servicios);\n          addResponseMessage('Servicios actuales:');\n          addResponseMessage(resumen);\n          addResponseMessage('¿Deseas eliminar algún servicio? Escribe el número o \"no\" para continuar.');\n          setStep(10); // paso especial para eliminación\n          return;\n        }\n        const indice = parseInt(msg) - 1;\n        if (!isNaN(indice) && formData.servicios[indice]) {\n          setServicioAEditar(indice);\n          addResponseMessage(`¿Qué deseas editar del servicio #${formData.servicios[indice].numero}? (escribe: número o cantidad )`);\n          setStep(92);\n        } else {\n          addResponseMessage('Entrada no válida. Escribe el número del servicio a editar o \"no\" para continuar.');\n        }\n        break;\n      case 92:\n        const opcion = msg.toLowerCase();\n        if (opcion === 'número' || opcion === 'numero') {\n          addResponseMessage('Escribe el nuevo número del servicio:');\n          setStep(93);\n        } else if (opcion === 'cantidad') {\n          addResponseMessage('Escribe la nueva cantidad del servicio:');\n          setStep(94);\n        } else if (opcion === 'ambos') {\n          setPasoExtra('cantidad'); // variable temporal para saber que luego viene la cantidad\n          addResponseMessage('Escribe el nuevo número del servicio:');\n          setStep(93);\n        } else {\n          addResponseMessage('Opción no válida. Escribe: número, cantidad o ambos.');\n        }\n        break;\n      case 93:\n        const nuevoNumero = parseInt(msg);\n        console.log('Nuevo número:', nuevoNumero);\n        if (isNaN(nuevoNumero) || nuevoNumero <= 0) {\n          addResponseMessage('Número inválido. Ingresa un número mayor a 0.');\n          return;\n        }\n        console.log('Servicio a editar1:', servicioAEditar);\n        if (servicioAEditar === null || isNaN(servicioAEditar) || servicioAEditar < 0 || servicioAEditar >= formData.servicios.length) {\n          addResponseMessage('Error interno: no se pudo identificar el servicio a editar.');\n          setStep(91); // volver a lista de servicios\n          return;\n        }\n        console.log('Servicio a editar2:', servicioAEditar);\n        const serviciosEditados = [...formData.servicios];\n        serviciosEditados[servicioAEditar] = {\n          ...serviciosEditados[servicioAEditar],\n          numero: nuevoNumero\n        };\n        console.log('Servicios editados3:', serviciosEditados);\n        setFormData({\n          ...formData,\n          servicios: serviciosEditados\n        });\n        console.log('Servicios editados4:', serviciosEditados);\n        if (pasoExtra === 'cantidad') {\n          setPasoExtra(null);\n          setStep(94);\n          addResponseMessage('Escribe la nueva cantidad del servicio:');\n        } else {\n          setServicioAEditar(null);\n          addResponseMessage('¡Servicio actualizado!1');\n          mostrarResumenServicios(serviciosEditados);\n          setStep(9);\n        }\n        break;\n      case 94:\n        const nuevaCantidad = parseInt(msg);\n        if (isNaN(nuevaCantidad) || nuevaCantidad <= 0) {\n          addResponseMessage('Cantidad inválida. Ingresa un número mayor a 0.');\n          return;\n        }\n        const serviciosActualizados = [...formData.servicios];\n        serviciosActualizados[servicioAEditar].cantidad = nuevaCantidad;\n        setFormData({\n          ...formData,\n          servicios: serviciosActualizados\n        });\n        setServicioAEditar(null);\n        addResponseMessage('¡Cantidad actualizada!');\n        mostrarResumenServicios(serviciosActualizados);\n        setStep(9);\n        break;\n      case 95:\n        const indiceEliminar = parseInt(msg) - 1;\n        if (!isNaN(indiceEliminar) && formData.servicios[indiceEliminar]) {\n          const servicioEliminado = formData.servicios[indiceEliminar];\n          const serviciosActualizados = [...formData.servicios];\n          serviciosActualizados.splice(indiceEliminar, 1);\n          setFormData(prev => ({\n            ...prev,\n            servicios: serviciosActualizados\n          }));\n          addResponseMessage(`🗑️ Servicio #${servicioEliminado.numero} eliminado.`);\n          const resumenActualizado = generarResumenServicios(serviciosActualizados, servicios);\n          addResponseMessage('Servicios restantes:');\n          addResponseMessage(resumenActualizado);\n          addResponseMessage('¿Qué deseas hacer ahora?\\n1. Agregar más servicios\\n2. Editar un servicio\\n3. Eliminar un servicio\\n4. Continuar con la cotización');\n          setStep(9);\n        } else {\n          addResponseMessage('Número inválido. Intenta nuevamente.');\n        }\n        break;\n      case 10:\n        if (msg.toLowerCase() === 'si') {\n          enviarDatos();\n          setStep(999);\n          addResponseMessage('¡Cotización enviada!');\n          addResponseMessage('¿Deseas crear otra cotización? (sí/no)');\n          setStep(11); // siguiente paso lógico del flujo\n          return;\n        } else if (msg.toLowerCase() === 'no') {\n          addResponseMessage('¡Gracias por usar nuestro servicio!');\n          addResponseMessage('¿Deseas crear otra cotización? (sí/no)');\n          setStep(11); // siguiente paso lógico del flujo\n          return;\n        }\n        break;\n      case 11:\n        if (msg.toLowerCase() === 'sí' || msg.toLowerCase() === 'si') {\n          setFormData({\n            nombre: '',\n            apellido: '',\n            correo: '',\n            telefono: '',\n            empresa: '',\n            fechaSolicitud: '',\n            fechaCaducidad: '',\n            servicios: []\n          });\n          setServicioActual({});\n          addResponseMessage(\"Perfecto. ¿Cuál es tu nombre?\");\n          setStep(0);\n        } else {\n          addResponseMessage('¡Gracias por usar nuestro servicio!');\n          setStep(999);\n        }\n        break;\n      default:\n        addResponseMessage('Ya hemos terminado. ¡Gracias!');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Mi App con Chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 593,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Widget, {\n      handleNewUserMessage: handleNewUserMessage,\n      title: \"Chat De Cotizacion\",\n      subtitle: \"Estamos para ayudarte\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 594,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 592,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"XG2yW9bXvBpNJETpiYoK3qzko4s=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","createServicioPreCotizacion","createPreCotizacion","getServicioData","Widget","addResponseMessage","jsxDEV","_jsxDEV","App","_s","step","setStep","formData","setFormData","nombre","apellido","correo","telefono","empresa","fechaSolicitud","fechaCaducidad","servicios","servicioActual","setServicioActual","hasGreeted","useRef","servicioTemporal","setServicioTemporal","numero","cantidad","servicioAEditar","setServicioAEditar","campoAEditar","setCampoAEditar","pasoExtra","setPasoExtra","setServicios","current","fetchServicios","response","data","console","log","error","validacionNombre","regex","test","length","validacionApellido","validacionCorreo","validacionTelefono","validacionEmpresa","validacionServicio","servicio","validacionCantidad","mostrarResumenServicios","resumenServicios","generarResumenServicios","serviciosTotales","serviciosData","map","s","i","info","find","serv","nombreServicio","join","enviarDatos","today","Date","toISOString","split","futureDate","setDate","getDate","preCotizacion","nombreCliente","apellidoCliente","denominacion","nombreEmpresa","descuento","iva","organizacion","tipoMoneda","estado","idPreCotizacion","id","servicioEncontrado","Number","descripcion","precio","handleNewUserMessage","msg","valid","nuevoFormData","resumen","toLowerCase","opcion","parseInt","isNaN","preguntas","partes","p","trim","numeros","hayInvalido","parte","push","cantidades","c","filter","nuevosServicios","index","prev","resumenDel","resumenFinal","indice","nuevoNumero","serviciosEditados","nuevaCantidad","serviciosActualizados","indiceEliminar","servicioEliminado","splice","resumenActualizado","className","children","fileName","_jsxFileName","lineNumber","columnNumber","title","subtitle","_c","$RefreshReg$"],"sources":["/Users/appletech/Desktop/chatbottest/chatbottest/src/App.js"],"sourcesContent":["import React,{useEffect, useState} from 'react';\nimport {createServicioPreCotizacion, createPreCotizacion, getServicioData } from './api/Api';\nimport { Widget, addResponseMessage } from 'react-chat-widget-react-18';\nimport 'react-chat-widget-react-18/lib/styles.css';\n\nfunction App() {\n  const [step, setStep] = React.useState(0);\n  const [formData, setFormData] = useState({\n    nombre: '',\n    apellido: '',\n    correo: '',\n    telefono: '',\n    empresa: '',\n    fechaSolicitud: '',\n    fechaCaducidad: '',\n    servicios: [],\n  });\n  const [servicioActual, setServicioActual] = useState({});\n  const hasGreeted = React.useRef(false);\n  const [servicioTemporal, setServicioTemporal] = useState({ numero: null, cantidad: null });\n  const [servicioAEditar, setServicioAEditar] = useState(null); // puede ser un índice\n  const [campoAEditar, setCampoAEditar] = useState(null);\n  const [pasoExtra, setPasoExtra] = useState(null); // variable temporal para saber que luego viene la cantidad\n  const [servicios, setServicios] = useState([]); // Estado para almacenar los servicios\n\n\n\n  React.useEffect(() => {\n    if (!hasGreeted.current) {\n      addResponseMessage('¡Hola! Soy un chatbot. ¿Quieres crear una cotización?');\n      addResponseMessage('Para crear una cotización necesito algunos datos.');\n      addResponseMessage(\"¿Cuál es tu nombre?\");\n      hasGreeted.current = true;\n    }\n  }, []);\n  \n  useEffect(() => {\n    const fetchServicios = async () => {\n      try {\n        const response = await getServicioData(7); // Cambia el ID según sea necesario\n        setServicios(response.data);\n        console.log(\"Servicios:\", response.data);\n      } catch (error) {\n        console.error(\"Error al obtener servicios:\", error);\n      }\n    };\n\n    fetchServicios();\n  },[]);\n\n  const validacionNombre = (nombre) => {\n    const regex = /^([A-Z][a-z]+)(\\s[A-Z][a-z]+)*$/;\n  return regex.test(nombre) && nombre.length <= 15;\n  }\n  const validacionApellido = (apellido) => {\n    const regex = /^[A-Z][a-zA-Z]{0,13}$/;\n    return regex.test(apellido);\n  }\n  const validacionCorreo = (correo) => {\n    const regex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n    return regex.test(correo);\n  }\n  const validacionTelefono = (telefono) => {\n    const regex = /^[0-9]{10}$/;\n    return regex.test(telefono);\n  }\n  const validacionEmpresa = (empresa) => {\n    const regex = /^[A-Z][a-zA-Z]{0,20}$/;\n    return regex.test(empresa);\n  }\n  /*const validacionFecha = (fecha) => {\n    const regex = /^\\d{4}-\\d{2}-\\d{2}$/;\n    return regex.test(fecha);\n  } */\n  const validacionServicio = (servicio) => {\n    const regex = /^[0-9]{1,3}$/;\n    return regex.test(servicio);\n  }\n  const validacionCantidad = (cantidad) => {\n    const regex = /^[0-9]{1,3}$/;\n    return regex.test(cantidad);\n  }\n  const mostrarResumenServicios = (servicio) => {\n    if (!servicio || servicio.length === 0) {\n      addResponseMessage('No hay servicios agregados.');\n      return;\n    }\n    //const serviciosTotales = [...servicio, ...nuevosServicios];\n    const resumenServicios = generarResumenServicios(servicio, servicios);\n    /*const resumen = servicio.map((s, i) =>\n      `${i + 1}. Servicio #${s.numero}, Cantidad: ${s.cantidad}`\n    ).join('\\n'); */\n  \n    addResponseMessage('Resumen de servicios 2:');\n    addResponseMessage(resumenServicios);\n    addResponseMessage('¿Qué deseas hacer ahora?\\n1. Agregar más servicios\\n2. Editar un servicio\\n3. Eliminar un servicio\\n4. Continuar con la cotización');\n    //addResponseMessage('¿Deseas editar alguno? Escribe el número del servicio en la lista o \"no\" para continuar.');\n  };\n\n  function generarResumenServicios(serviciosTotales, serviciosData) {\n    return serviciosTotales.map((s, i) => {\n      const info = serviciosData.find(serv => serv.numero === s.numero);\n      const nombre = info ? info.nombreServicio : `Servicio #${s.numero}`;\n      return `${i + 1}. ${nombre}, Cantidad: ${s.cantidad}`;\n    }).join('\\n');\n  }\n\n  const enviarDatos = async () => {\n    try {\n      const today = new Date();\n      const fechaSolicitud = today.toISOString().split('T')[0]; // formato YYYY-MM-DD\n\n      const futureDate = new Date();\n      futureDate.setDate(today.getDate() + 30);\n      const fechaCaducidad = futureDate.toISOString().split('T')[0];\n      // Crear la pre-cotización principal\n      const preCotizacion = await createPreCotizacion({\n        nombreCliente: formData.nombre,\n        apellidoCliente: formData.apellido,\n        correo: formData.correo,\n        denominacion:\"MXN\",\n        //telefono: formData.telefono,\n        nombreEmpresa: formData.empresa,\n        fechaSolicitud:fechaSolicitud,\n        fechaCaducidad:fechaCaducidad,\n        descuento:0,\n        iva:1,\n        organizacion:7,\n        tipoMoneda:1,\n        estado: 8,\n      });\n      //console.log(\"Pre-cotización creada:\", preCotizacion);\n      // Aquí puedes obtener el ID de la pre-cotización creada\n      const idPreCotizacion = preCotizacion.data.id; // Ajusta según tu respuesta\n      //console.log(\"ID de la pre-cotización:\", idPreCotizacion);\n      //console.log(\"Servicios a agregar:\", formData.servicios);\n      // Crear los servicios asociados\n      for (const servicio of formData.servicios) {\n        console.log(\"Servicio a agregar:\", servicio);\n        const servicioEncontrado = servicios.find(s => s.numero === Number(servicio.numero));\n        //console.log(\"Servicio a agregar cantidad:\", servicio.cantidad);\n        //console.log(\"Servicio a agregar numero\", servicio.numero);\n        await createServicioPreCotizacion({\n          descripcion: \"Sin descripción\",\n          precio:\"0\",\n          cantidad:    Number(servicio.cantidad)  || 0,\n          preCotizacion: idPreCotizacion,\n          servicio:    servicioEncontrado.id,\n          \n        });\n      }\n  \n      addResponseMessage(\"✅ ¡Cotización enviada exitosamente!\");\n      //console.log(\"Datos enviados:\", formData);\n    } catch (error) {\n      console.error(\"Error al enviar datos:\", error);\n      addResponseMessage(\"❌ Hubo un error al enviar la cotización. Inténtalo de nuevo.\");\n    }\n  };\n        \n\n  const handleNewUserMessage = (msg) => {\n    if (campoAEditar !== null) {\n      let valid = false;\n      let nuevoFormData = { ...formData };\n    \n      switch (campoAEditar) {\n        case 1:\n          valid = validacionNombre(msg);\n          if (valid) nuevoFormData.nombre = msg;\n          break;\n        case 2:\n          valid = validacionApellido(msg);\n          if (valid) nuevoFormData.apellido = msg;\n          break;\n        case 3:\n          valid = validacionCorreo(msg);\n          if (valid) nuevoFormData.correo = msg;\n          break;\n        case 4:\n          valid = validacionTelefono(msg);\n          if (valid) nuevoFormData.telefono = msg;\n          break;\n        case 5:\n          valid = validacionEmpresa(msg);\n          if (valid) nuevoFormData.empresa = msg;\n          break;\n          default:\n            addResponseMessage('Opción no válida. Intenta de nuevo.');\n            return;\n      }\n    \n      if (!valid) {\n        addResponseMessage('Dato inválido. Intenta de nuevo:');\n        return;\n      }\n    \n      setFormData(nuevoFormData);\n      setCampoAEditar(null); // salimos del modo edición\n    \n      const resumen = `\n    1. Nombre: ${nuevoFormData.nombre}\n    2. Apellido: ${nuevoFormData.apellido}\n    3. Correo: ${nuevoFormData.correo}\n    4. Teléfono: ${nuevoFormData.telefono}\n    5. Empresa: ${nuevoFormData.empresa}\n      `;\n      addResponseMessage('¡Dato actualizado!');\n      addResponseMessage('Resumen actualizado:');\n      addResponseMessage(resumen);\n      addResponseMessage('¿Deseas editar otro dato? Escribe el número o \"no\" para continuar.');\n    \n      return;\n    }\n    \n    switch (step) {\n      case 0:\n        if (!validacionNombre(msg)) {\n          addResponseMessage('Por favor, ingresa un nombre válido (inicia con mayúscula y máximo 12 letras).');\n          addResponseMessage(\"¿Cuál es tu nombre?\");\n          return;\n        }\n        setFormData({ ...formData, nombre: msg });\n        addResponseMessage('¿Cuál es tu apellido paterno?');\n        setStep(1);\n        break;\n      case 1:\n        if(!validacionApellido(msg)) {\n          addResponseMessage('Por favor, ingresa un apellido válido (inicia con mayúscula y máximo 13 letras).');\n          addResponseMessage('¿Cuál es tu apellido paterno?');\n          return;\n        }\n        setFormData({ ...formData, apellido: msg });\n        addResponseMessage('¿Cuál es tu correo electrónico?');\n        setStep(2);\n        break;\n      case 2:\n        if (!validacionCorreo(msg)) {\n          addResponseMessage('Por favor, ingresa un correo electrónico válido.');\n          addResponseMessage('¿Cuál es tu correo electrónico?');\n          return;\n        }\n        setFormData({ ...formData, correo: msg });\n        addResponseMessage('¿Cuál es tu número telefónico?');\n        setStep(3);\n        break;\n      case 3:\n        if (!validacionTelefono(msg)) {\n          addResponseMessage('Por favor, ingresa un número telefónico válido (10 dígitos).');\n          addResponseMessage('¿Cuál es tu número telefónico?');\n          return;\n        }\n        setFormData({ ...formData, telefono: msg });\n        addResponseMessage('¿Cuál es el nombre de la empresa?');\n        setStep(4);\n        break;\n      case 4:\n        if (!validacionEmpresa(msg)) {\n          addResponseMessage('Por favor, ingresa un nombre de empresa válido (inicia con mayúscula y máximo 20 letras).');\n          addResponseMessage('¿Cuál es el nombre de la empresa?');\n          return;\n        }\n        const nuevoFormData = { ...formData, empresa: msg };\n        setFormData(nuevoFormData);\n        addResponseMessage('¡Gracias por completar el formulario!');\n          console.log('Datos finales del formulario:', formData);\n      \n          // Mostrar resumen para edición\n          const resumen = `\n      1. Nombre: ${nuevoFormData.nombre}\n      2. Apellido: ${nuevoFormData.apellido}\n      3. Correo: ${nuevoFormData.correo}\n      4. Teléfono: ${nuevoFormData.telefono}\n      5. Empresa: ${nuevoFormData.empresa}\n          `;\n          addResponseMessage('¿Deseas editar algún dato antes de enviar? Escribe el número del campo que deseas editar o \"no\" para continuar.');\n          addResponseMessage(resumen);\n          setStep(111);\n        //addResponseMessage('Ahora comenzaras a agregar los servicios');\n        //addResponseMessage('Escribe el número de servicio:');\n        \n        //setStep(6);\n        break;\n      case 5:\n        if (!validacionEmpresa(msg)) {\n          addResponseMessage('Por favor, ingresa un nombre de empresa válido (inicia con mayúscula y máximo 20 letras).');\n          addResponseMessage('¿Cuál es el nombre de la empresa?');\n          return;\n        }\n        //setFormData({ ...formData, empresa: msg });\n         addResponseMessage('Ahora se comenzara a agregar los servicios de la cotizacion');\n        addResponseMessage('Escribe el número de servicio:');\n    \n        break;\n\n      case 111:\n        //console.log('Campo a editar msg:', msg);\n        if (msg.toLowerCase() === 'no') {\n          //enviarDatos();\n          //addResponseMessage('Datos enviados correctamente. ¿Deseas crear otra cotización? (sí/no)');\n          addResponseMessage('Ahora se comenzara a agregar los servicios de la cotizacion');\n          addResponseMessage('Escribe los numeros de servicio separados por comas (Ejemplo: 1,2,3):');\n          setStep(7);\n        } else {\n          const opcion = parseInt(msg);\n          if (isNaN(opcion) || opcion < 1 || opcion > 5) {\n            addResponseMessage('Por favor, escribe un número válido entre 1 y 5, o \"no\" para continuar.');\n          } else {\n            console.log('Campo a editar:', opcion);\n            setCampoAEditar(opcion); // regresa al paso correspondiente\n            console.log('Campo a editar:', campoAEditar);\n            const preguntas = [\n              '¿Cuál es tu nombre?',\n              '¿Cuál es tu apellido paterno?',\n              '¿Cuál es tu correo electrónico?',\n              '¿Cuál es tu número telefónico?',\n              '¿Cuál es el nombre de la empresa?'\n            ];\n            addResponseMessage(`Vamos a corregir el campo ${opcion}:`);\n            addResponseMessage(preguntas[opcion -1]);\n\n          }\n        }\n        //setStep(6);\n        break;\n      \n      case 6:\n        addResponseMessage('Ahora comenzaras a agregar los servicios');\n        addResponseMessage('Escribe los numeros de servicio separados por comas (Ejemplo: 1,2,3):');\n        \n        setStep(7);\n        return;\n        //break;\n      case 7:\n              // Entrada de varios números de servicio\n        const partes = msg.split(',').map(p => p.trim());\n        const numeros = [];\n        let hayInvalido = false;\n\n        for (let parte of partes) {\n          const numero = parseInt(parte, 10);\n          if (!/^\\d+$/.test(parte) || isNaN(numero)) {\n            hayInvalido = true;\n            break;\n          }\n          numeros.push(numero);\n        }\n\n        if (hayInvalido) {\n          addResponseMessage('❌ Solo se permiten números enteros separados por coma. Intenta de nuevo.');\n          return;\n        }\n        setServicioTemporal({ ...servicioTemporal, numeros }); // guarda varios\n        addResponseMessage('¿Cuántos necesita de cada uno? Ingresa las cantidades separadas por comas en el mismo orden.');\n        console.log('Paso actual:', step);\n\n        setStep(8);\n        console.log('Paso actual:', step);\n\n        break;\n      \n      case 8:\n        // Entrada de varias cantidades\n        const cantidades = msg.split(',').map(c => parseInt(c.trim())).filter(c => !isNaN(c));\n        if (cantidades.length !== servicioTemporal.numeros.length) {\n          addResponseMessage('El número de cantidades no coincide con el número de servicios. Intenta de nuevo.');\n          return;\n        }\n\n        const nuevosServicios = servicioTemporal.numeros.map((numero, index) => ({\n          numero,\n          cantidad: cantidades[index]\n        }));\n\n        setFormData(prev => ({\n          ...prev,\n          servicios: [...prev.servicios, ...nuevosServicios]\n        }));\n        setServicioTemporal({ numeros: [] });\n        /*addResponseMessage('¿Quieres agregar más servicios? (sí/no)');\n        setStep(9); */\n        const serviciosTotales = [...formData.servicios, ...nuevosServicios];\n        const resumenServicios = generarResumenServicios(serviciosTotales, servicios);\n  \n        addResponseMessage('✅ Servicios agregados:');\n        addResponseMessage(resumenServicios);\n        addResponseMessage('¿Qué deseas hacer ahora?\\n1. Agregar más servicios\\n2. Editar un servicio\\n3. Eliminar un servicio\\n4. Continuar con la cotización');\n        setStep(9);\n        break;\n        \n        case 9:\n          switch (msg.trim()) {\n            case '1':\n              addResponseMessage('Dime qué número(s) de servicio quieres agregar.');\n              setStep(7); // Paso para seleccionar más servicios\n              break;\n            case '2':\n              const resumen = generarResumenServicios(formData.servicios, servicios);\n              addResponseMessage('Servicios actuales:');\n              addResponseMessage(resumen);\n              addResponseMessage('Escribe el número del servicio que deseas editar:');\n              setStep(91); // Paso de edición\n              break;\n            case '3':\n              const resumenDel = generarResumenServicios(formData.servicios, servicios);\n              addResponseMessage('Servicios actuales:');\n              addResponseMessage(resumenDel);\n              addResponseMessage('Escribe el número del servicio que deseas eliminar:');\n              setStep(95); // Paso de eliminación\n              break;\n            case '4':\n              const resumenFinal = generarResumenServicios(formData.servicios, servicios);\n              addResponseMessage('Resumen final de servicios:');\n              addResponseMessage(resumenFinal);\n              addResponseMessage('¿Confirmas que deseas enviar la cotización? (sí/no)');\n              setStep(10); // Paso final para confirmar y enviar\n              break;\n            default:\n              addResponseMessage('Por favor ingresa una opción válida (1, 2, 3 o 4).');\n              break;\n          }\n        break;\n\n        case 91:\n            if (msg.toLowerCase() === 'no') {\n            /*enviarDatos();\n            setStep(999);\n            addResponseMessage('¡Cotización enviada!');\n            addResponseMessage('¿Deseas crear otra cotización? (sí/no)');\n            setStep(10); */\n            const resumen = generarResumenServicios(formData.servicios, servicios);\n            addResponseMessage('Servicios actuales:');\n            addResponseMessage(resumen);\n            addResponseMessage('¿Deseas eliminar algún servicio? Escribe el número o \"no\" para continuar.');\n            setStep(10); // paso especial para eliminación\n            return;\n            }\n\n            const indice = parseInt(msg) - 1;\n            if (!isNaN(indice) && formData.servicios[indice]) {\n            setServicioAEditar(indice);\n            addResponseMessage(`¿Qué deseas editar del servicio #${formData.servicios[indice].numero}? (escribe: número o cantidad )`);\n            setStep(92);\n            } else {\n            addResponseMessage('Entrada no válida. Escribe el número del servicio a editar o \"no\" para continuar.');\n            }\n            break;\n\n        case 92:\n          const opcion = msg.toLowerCase();\n          if (opcion === 'número' || opcion === 'numero') {\n            addResponseMessage('Escribe el nuevo número del servicio:');\n            setStep(93);\n          } else if (opcion === 'cantidad') {\n            addResponseMessage('Escribe la nueva cantidad del servicio:');\n            setStep(94);\n          } else if (opcion === 'ambos') {\n            setPasoExtra('cantidad'); // variable temporal para saber que luego viene la cantidad\n            addResponseMessage('Escribe el nuevo número del servicio:');\n            setStep(93);\n          } else {\n            addResponseMessage('Opción no válida. Escribe: número, cantidad o ambos.');\n          }\n          \n          break;\n        \n        case 93:\n          const nuevoNumero = parseInt(msg);\n          console.log('Nuevo número:', nuevoNumero);\n          if (isNaN(nuevoNumero) || nuevoNumero <= 0) {\n            addResponseMessage('Número inválido. Ingresa un número mayor a 0.');\n            return;\n          }\n          console.log('Servicio a editar1:', servicioAEditar);\n          if (\n            servicioAEditar === null ||\n            isNaN(servicioAEditar) ||\n            servicioAEditar < 0 ||\n            servicioAEditar >= formData.servicios.length\n          ) {\n            addResponseMessage('Error interno: no se pudo identificar el servicio a editar.');\n            setStep(91); // volver a lista de servicios\n            return;\n          }\n          console.log('Servicio a editar2:', servicioAEditar);\n          const serviciosEditados = [...formData.servicios];\n          serviciosEditados[servicioAEditar] = {\n            ...serviciosEditados[servicioAEditar],\n            numero: nuevoNumero,\n          };\n          console.log('Servicios editados3:', serviciosEditados);\n          setFormData({ ...formData, servicios: serviciosEditados });\n          console.log('Servicios editados4:', serviciosEditados);  \n          if (pasoExtra === 'cantidad') {\n            setPasoExtra(null);\n            setStep(94);\n            addResponseMessage('Escribe la nueva cantidad del servicio:');\n          } else {\n            setServicioAEditar(null);\n            addResponseMessage('¡Servicio actualizado!1');\n            mostrarResumenServicios(serviciosEditados);\n            setStep(9);\n          }\n\n          break;\n        \n        case 94:\n          const nuevaCantidad = parseInt(msg);\n          if (isNaN(nuevaCantidad) || nuevaCantidad <= 0) {\n            addResponseMessage('Cantidad inválida. Ingresa un número mayor a 0.');\n            return;\n          }\n\n          const serviciosActualizados = [...formData.servicios];\n          serviciosActualizados[servicioAEditar].cantidad = nuevaCantidad;\n          setFormData({ ...formData, servicios: serviciosActualizados });\n\n          setServicioAEditar(null);\n          addResponseMessage('¡Cantidad actualizada!');\n          mostrarResumenServicios(serviciosActualizados);\n          setStep(9);\n\n          break;\n\n        case 95:\n          const indiceEliminar = parseInt(msg) - 1;\n          if (!isNaN(indiceEliminar) && formData.servicios[indiceEliminar]) {\n            const servicioEliminado = formData.servicios[indiceEliminar];\n            const serviciosActualizados = [...formData.servicios];\n            serviciosActualizados.splice(indiceEliminar, 1);\n\n            setFormData(prev => ({\n              ...prev,\n              servicios: serviciosActualizados\n            }));\n\n            addResponseMessage(`🗑️ Servicio #${servicioEliminado.numero} eliminado.`);\n            const resumenActualizado = generarResumenServicios(serviciosActualizados, servicios);\n            addResponseMessage('Servicios restantes:');\n            addResponseMessage(resumenActualizado);\n            addResponseMessage('¿Qué deseas hacer ahora?\\n1. Agregar más servicios\\n2. Editar un servicio\\n3. Eliminar un servicio\\n4. Continuar con la cotización');\n            setStep(9);\n          } else {\n            addResponseMessage('Número inválido. Intenta nuevamente.');\n          }\n          break;\n\n        case 10:\n          if (msg.toLowerCase() === 'si') {\n            enviarDatos();\n            setStep(999);\n            addResponseMessage('¡Cotización enviada!');\n            addResponseMessage('¿Deseas crear otra cotización? (sí/no)');\n            setStep(11); // siguiente paso lógico del flujo\n            return;\n          }else if (msg.toLowerCase() === 'no') {\n            addResponseMessage('¡Gracias por usar nuestro servicio!');\n            addResponseMessage('¿Deseas crear otra cotización? (sí/no)');\n            setStep(11); // siguiente paso lógico del flujo\n            return;\n          }\n        \n          \n          break;\n        \n      case 11:\n        if (msg.toLowerCase() === 'sí' || msg.toLowerCase() === 'si') {\n          setFormData({\n            nombre: '',\n            apellido: '',\n            correo: '',\n            telefono: '',\n            empresa: '',\n            fechaSolicitud: '',\n            fechaCaducidad: '',\n            servicios: [],\n          });\n          setServicioActual({});\n          addResponseMessage(\"Perfecto. ¿Cuál es tu nombre?\");\n          setStep(0);\n        } else {\n          addResponseMessage('¡Gracias por usar nuestro servicio!');\n          setStep(999);\n        }\n        break;\n      default:\n        addResponseMessage('Ya hemos terminado. ¡Gracias!');\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Mi App con Chat</h1>\n      <Widget\n        handleNewUserMessage={handleNewUserMessage}\n        title=\"Chat De Cotizacion\"\n        subtitle=\"Estamos para ayudarte\"\n      />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}